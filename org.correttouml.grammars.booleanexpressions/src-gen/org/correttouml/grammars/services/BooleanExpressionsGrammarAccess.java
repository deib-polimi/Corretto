/*
* generated by Xtext
*/
package org.correttouml.grammars.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BooleanExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionBooleanExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Model:
		//	expression=booleanExpression;
		public ParserRule getRule() { return rule; }

		//expression=booleanExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//booleanExpression
		public RuleCall getExpressionBooleanExpressionParserRuleCall_0() { return cExpressionBooleanExpressionParserRuleCall_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNotExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNotExpressionBooleanExpressionParserRuleCall_0_1_0 = (RuleCall)cNotExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOrLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOrLeftBooleanTermParserRuleCall_1_0_0 = (RuleCall)cOrLeftAssignment_1_0.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOrRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOrRightBooleanTermParserRuleCall_1_2_0 = (RuleCall)cOrRightAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cAndLeftAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAndLeftBooleanTermParserRuleCall_2_0_0 = (RuleCall)cAndLeftAssignment_2_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAndRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAndRightBooleanTermParserRuleCall_2_2_0 = (RuleCall)cAndRightAssignment_2_2.eContents().get(0);
		private final Assignment cBooleanTermAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanTermBooleanTermParserRuleCall_3_0 = (RuleCall)cBooleanTermAssignment_3.eContents().get(0);
		
		//booleanExpression:
		//	"!!" notExpression=booleanExpression | orLeft=booleanTerm "||" orRight=booleanTerm | andLeft=booleanTerm "&&"
		//	andRight=booleanTerm | booleanTerm=booleanTerm;
		public ParserRule getRule() { return rule; }

		//"!!" notExpression=booleanExpression | orLeft=booleanTerm "||" orRight=booleanTerm | andLeft=booleanTerm "&&"
		//andRight=booleanTerm | booleanTerm=booleanTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!!" notExpression=booleanExpression
		public Group getGroup_0() { return cGroup_0; }

		//"!!"
		public Keyword getExclamationMarkExclamationMarkKeyword_0_0() { return cExclamationMarkExclamationMarkKeyword_0_0; }

		//notExpression=booleanExpression
		public Assignment getNotExpressionAssignment_0_1() { return cNotExpressionAssignment_0_1; }

		//booleanExpression
		public RuleCall getNotExpressionBooleanExpressionParserRuleCall_0_1_0() { return cNotExpressionBooleanExpressionParserRuleCall_0_1_0; }

		//orLeft=booleanTerm "||" orRight=booleanTerm
		public Group getGroup_1() { return cGroup_1; }

		//orLeft=booleanTerm
		public Assignment getOrLeftAssignment_1_0() { return cOrLeftAssignment_1_0; }

		//booleanTerm
		public RuleCall getOrLeftBooleanTermParserRuleCall_1_0_0() { return cOrLeftBooleanTermParserRuleCall_1_0_0; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }

		//orRight=booleanTerm
		public Assignment getOrRightAssignment_1_2() { return cOrRightAssignment_1_2; }

		//booleanTerm
		public RuleCall getOrRightBooleanTermParserRuleCall_1_2_0() { return cOrRightBooleanTermParserRuleCall_1_2_0; }

		//andLeft=booleanTerm "&&" andRight=booleanTerm
		public Group getGroup_2() { return cGroup_2; }

		//andLeft=booleanTerm
		public Assignment getAndLeftAssignment_2_0() { return cAndLeftAssignment_2_0; }

		//booleanTerm
		public RuleCall getAndLeftBooleanTermParserRuleCall_2_0_0() { return cAndLeftBooleanTermParserRuleCall_2_0_0; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_2_1() { return cAmpersandAmpersandKeyword_2_1; }

		//andRight=booleanTerm
		public Assignment getAndRightAssignment_2_2() { return cAndRightAssignment_2_2; }

		//booleanTerm
		public RuleCall getAndRightBooleanTermParserRuleCall_2_2_0() { return cAndRightBooleanTermParserRuleCall_2_2_0; }

		//booleanTerm=booleanTerm
		public Assignment getBooleanTermAssignment_3() { return cBooleanTermAssignment_3; }

		//booleanTerm
		public RuleCall getBooleanTermBooleanTermParserRuleCall_3_0() { return cBooleanTermBooleanTermParserRuleCall_3_0; }
	}

	public class BooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "booleanTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//booleanTerm:
		//	TimeConstraint | BooleanVariable | VariableCondition;
		public ParserRule getRule() { return rule; }

		//TimeConstraint | BooleanVariable | VariableCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//TimeConstraint
		public RuleCall getTimeConstraintParserRuleCall_0() { return cTimeConstraintParserRuleCall_0; }

		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_1() { return cBooleanVariableParserRuleCall_1; }

		//VariableCondition
		public RuleCall getVariableConditionParserRuleCall_2() { return cVariableConditionParserRuleCall_2; }
	}

	public class TimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEvent2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvent2EventParserRuleCall_1_0 = (RuleCall)cEvent2Assignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEvent1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEvent1EventParserRuleCall_4_0 = (RuleCall)cEvent1Assignment_4.eContents().get(0);
		private final Assignment cOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOpRELATIONSTerminalRuleCall_5_0 = (RuleCall)cOpAssignment_5.eContents().get(0);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueINTTerminalRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		
		//TimeConstraint:
		//	"@" event2=Event "-" "@" event1=Event op=RELATIONS value=INT;
		public ParserRule getRule() { return rule; }

		//"@" event2=Event "-" "@" event1=Event op=RELATIONS value=INT
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//event2=Event
		public Assignment getEvent2Assignment_1() { return cEvent2Assignment_1; }

		//Event
		public RuleCall getEvent2EventParserRuleCall_1_0() { return cEvent2EventParserRuleCall_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//"@"
		public Keyword getCommercialAtKeyword_3() { return cCommercialAtKeyword_3; }

		//event1=Event
		public Assignment getEvent1Assignment_4() { return cEvent1Assignment_4; }

		//Event
		public RuleCall getEvent1EventParserRuleCall_4_0() { return cEvent1EventParserRuleCall_4_0; }

		//op=RELATIONS
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }

		//RELATIONS
		public RuleCall getOpRELATIONSTerminalRuleCall_5_0() { return cOpRELATIONSTerminalRuleCall_5_0; }

		//value=INT
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_6_0() { return cValueINTTerminalRuleCall_6_0; }
	}

	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanVariable");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_0 = (RuleCall)cVariableAssignment.eContents().get(0);
		
		//BooleanVariable:
		//	variable=ID;
		public ParserRule getRule() { return rule; }

		//variable=ID
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0() { return cVariableIDTerminalRuleCall_0; }
	}

	public class VariableConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Assignment cRelationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationRELATIONSTerminalRuleCall_2_0 = (RuleCall)cRelationAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariableCondition:
		//	"{" variable=ID relation=RELATIONS value=INT "}";
		public ParserRule getRule() { return rule; }

		//"{" variable=ID relation=RELATIONS value=INT "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//variable=ID
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_0() { return cVariableIDTerminalRuleCall_1_0; }

		//relation=RELATIONS
		public Assignment getRelationAssignment_2() { return cRelationAssignment_2; }

		//RELATIONS
		public RuleCall getRelationRELATIONSTerminalRuleCall_2_0() { return cRelationRELATIONSTerminalRuleCall_2_0; }

		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEventNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEventNameIDTerminalRuleCall_0_0_0 = (RuleCall)cEventNameAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventExtensionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEventExtensionEventExtensionsParserRuleCall_0_2_0 = (RuleCall)cEventExtensionAssignment_0_2.eContents().get(0);
		private final Assignment cNowEventAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNowEventNowKeyword_1_0 = (Keyword)cNowEventAssignment_1.eContents().get(0);
		
		//Event:
		//	eventName=ID "." eventExtension=EventExtensions | nowEvent?="now";
		public ParserRule getRule() { return rule; }

		//eventName=ID "." eventExtension=EventExtensions | nowEvent?="now"
		public Alternatives getAlternatives() { return cAlternatives; }

		//eventName=ID "." eventExtension=EventExtensions
		public Group getGroup_0() { return cGroup_0; }

		//eventName=ID
		public Assignment getEventNameAssignment_0_0() { return cEventNameAssignment_0_0; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0_0_0() { return cEventNameIDTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//eventExtension=EventExtensions
		public Assignment getEventExtensionAssignment_0_2() { return cEventExtensionAssignment_0_2; }

		//EventExtensions
		public RuleCall getEventExtensionEventExtensionsParserRuleCall_0_2_0() { return cEventExtensionEventExtensionsParserRuleCall_0_2_0; }

		//nowEvent?="now"
		public Assignment getNowEventAssignment_1() { return cNowEventAssignment_1; }

		//"now"
		public Keyword getNowEventNowKeyword_1_0() { return cNowEventNowKeyword_1_0; }
	}

	public class EventExtensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventExtensions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEnterKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStartKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEndKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTickKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSigKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCallKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSendKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cReceiveKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//EventExtensions:
		//	"exit" | "enter" | "start" | "end" | "tick" | "sig" | "call" | "send" | "receive";
		public ParserRule getRule() { return rule; }

		//"exit" | "enter" | "start" | "end" | "tick" | "sig" | "call" | "send" | "receive"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"exit"
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }

		//"enter"
		public Keyword getEnterKeyword_1() { return cEnterKeyword_1; }

		//"start"
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//"tick"
		public Keyword getTickKeyword_4() { return cTickKeyword_4; }

		//"sig"
		public Keyword getSigKeyword_5() { return cSigKeyword_5; }

		//"call"
		public Keyword getCallKeyword_6() { return cCallKeyword_6; }

		//"send"
		public Keyword getSendKeyword_7() { return cSendKeyword_7; }

		//"receive"
		public Keyword getReceiveKeyword_8() { return cReceiveKeyword_8; }
	}
	
	
	private ModelElements pModel;
	private BooleanExpressionElements pBooleanExpression;
	private BooleanTermElements pBooleanTerm;
	private TimeConstraintElements pTimeConstraint;
	private BooleanVariableElements pBooleanVariable;
	private VariableConditionElements pVariableCondition;
	private EventElements pEvent;
	private EventExtensionsElements pEventExtensions;
	private TerminalRule tRELATIONS;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public BooleanExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.correttouml.grammars.BooleanExpressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	expression=booleanExpression;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//booleanExpression:
	//	"!!" notExpression=booleanExpression | orLeft=booleanTerm "||" orRight=booleanTerm | andLeft=booleanTerm "&&"
	//	andRight=booleanTerm | booleanTerm=booleanTerm;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//booleanTerm:
	//	TimeConstraint | BooleanVariable | VariableCondition;
	public BooleanTermElements getBooleanTermAccess() {
		return (pBooleanTerm != null) ? pBooleanTerm : (pBooleanTerm = new BooleanTermElements());
	}
	
	public ParserRule getBooleanTermRule() {
		return getBooleanTermAccess().getRule();
	}

	//TimeConstraint:
	//	"@" event2=Event "-" "@" event1=Event op=RELATIONS value=INT;
	public TimeConstraintElements getTimeConstraintAccess() {
		return (pTimeConstraint != null) ? pTimeConstraint : (pTimeConstraint = new TimeConstraintElements());
	}
	
	public ParserRule getTimeConstraintRule() {
		return getTimeConstraintAccess().getRule();
	}

	//BooleanVariable:
	//	variable=ID;
	public BooleanVariableElements getBooleanVariableAccess() {
		return (pBooleanVariable != null) ? pBooleanVariable : (pBooleanVariable = new BooleanVariableElements());
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}

	//VariableCondition:
	//	"{" variable=ID relation=RELATIONS value=INT "}";
	public VariableConditionElements getVariableConditionAccess() {
		return (pVariableCondition != null) ? pVariableCondition : (pVariableCondition = new VariableConditionElements());
	}
	
	public ParserRule getVariableConditionRule() {
		return getVariableConditionAccess().getRule();
	}

	//Event:
	//	eventName=ID "." eventExtension=EventExtensions | nowEvent?="now";
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//EventExtensions:
	//	"exit" | "enter" | "start" | "end" | "tick" | "sig" | "call" | "send" | "receive";
	public EventExtensionsElements getEventExtensionsAccess() {
		return (pEventExtensions != null) ? pEventExtensions : (pEventExtensions = new EventExtensionsElements());
	}
	
	public ParserRule getEventExtensionsRule() {
		return getEventExtensionsAccess().getRule();
	}

	//terminal RELATIONS:
	//	"<" | ">" | "==" | "<=" | ">=" | "!=";
	public TerminalRule getRELATIONSRule() {
		return (tRELATIONS != null) ? tRELATIONS : (tRELATIONS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RELATIONS"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
