/*
 * generated by Xtext
 */
package org.correttouml.grammars.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.correttouml.grammars.booleanExpressions.AndExpression;
import org.correttouml.grammars.booleanExpressions.BaseExpression;
import org.correttouml.grammars.booleanExpressions.BooleanExpressionsPackage;
import org.correttouml.grammars.booleanExpressions.BooleanVariable;
import org.correttouml.grammars.booleanExpressions.EXPRESSION;
import org.correttouml.grammars.booleanExpressions.Event;
import org.correttouml.grammars.booleanExpressions.Model;
import org.correttouml.grammars.booleanExpressions.OrExpression;
import org.correttouml.grammars.booleanExpressions.TERM;
import org.correttouml.grammars.booleanExpressions.TimeConstraint;
import org.correttouml.grammars.booleanExpressions.VariableCondition;
import org.correttouml.grammars.booleanExpressions.booleanTerm;
import org.correttouml.grammars.services.BooleanExpressionsGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BooleanExpressionsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BooleanExpressionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BooleanExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BooleanExpressionsPackage.AND_EXPRESSION:
				sequence_AndExpression(context, (AndExpression) semanticObject); 
				return; 
			case BooleanExpressionsPackage.BASE_EXPRESSION:
				sequence_BaseExpression(context, (BaseExpression) semanticObject); 
				return; 
			case BooleanExpressionsPackage.BOOLEAN_VARIABLE:
				sequence_BooleanVariable(context, (BooleanVariable) semanticObject); 
				return; 
			case BooleanExpressionsPackage.EXPRESSION:
				sequence_EXPRESSION(context, (EXPRESSION) semanticObject); 
				return; 
			case BooleanExpressionsPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case BooleanExpressionsPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BooleanExpressionsPackage.OR_EXPRESSION:
				sequence_OrExpression(context, (OrExpression) semanticObject); 
				return; 
			case BooleanExpressionsPackage.TERM:
				sequence_TERM(context, (TERM) semanticObject); 
				return; 
			case BooleanExpressionsPackage.TIME_CONSTRAINT:
				sequence_TimeConstraint(context, (TimeConstraint) semanticObject); 
				return; 
			case BooleanExpressionsPackage.VARIABLE_CONDITION:
				sequence_VariableCondition(context, (VariableCondition) semanticObject); 
				return; 
			case BooleanExpressionsPackage.BOOLEAN_TERM:
				sequence_booleanTerm(context, (booleanTerm) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AndExpression returns AndExpression
	 *
	 * Constraint:
	 *     (leftExpression=BaseExpression (and=AND rightExpression=AndExpression)?)
	 */
	protected void sequence_AndExpression(ISerializationContext context, AndExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BaseExpression returns BaseExpression
	 *
	 * Constraint:
	 *     (not=NOT? (booleanTerm=booleanTerm | rootExpression=OrExpression))
	 */
	protected void sequence_BaseExpression(ISerializationContext context, BaseExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanVariable returns BooleanVariable
	 *
	 * Constraint:
	 *     variable=ID
	 */
	protected void sequence_BooleanVariable(ISerializationContext context, BooleanVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.BOOLEAN_VARIABLE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.BOOLEAN_VARIABLE__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanVariableAccess().getVariableIDTerminalRuleCall_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EXPRESSION returns EXPRESSION
	 *
	 * Constraint:
	 *     ((firstTerm=TERM operator=OPERATOR secondTerm=TERM) | alone=TERM)
	 */
	protected void sequence_EXPRESSION(ISerializationContext context, EXPRESSION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     ((objName=ID? eventName=ID eventExtension=EventExtensions) | nowEvent?='now')
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     expression=OrExpression
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.MODEL__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.MODEL__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getExpressionOrExpressionParserRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OrExpression returns OrExpression
	 *
	 * Constraint:
	 *     (leftExpression=AndExpression (or=OR rightExpression=OrExpression)?)
	 */
	protected void sequence_OrExpression(ISerializationContext context, OrExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TERM returns TERM
	 *
	 * Constraint:
	 *     (variable=ID | constant=INT)
	 */
	protected void sequence_TERM(ISerializationContext context, TERM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TimeConstraint returns TimeConstraint
	 *
	 * Constraint:
	 *     (event2=Event event1=Event op=RELATIONS value=INT)
	 */
	protected void sequence_TimeConstraint(ISerializationContext context, TimeConstraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__EVENT2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__EVENT2));
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__EVENT1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__EVENT1));
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__OP));
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.TIME_CONSTRAINT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeConstraintAccess().getEvent2EventParserRuleCall_1_0(), semanticObject.getEvent2());
		feeder.accept(grammarAccess.getTimeConstraintAccess().getEvent1EventParserRuleCall_4_0(), semanticObject.getEvent1());
		feeder.accept(grammarAccess.getTimeConstraintAccess().getOpRELATIONSTerminalRuleCall_5_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getTimeConstraintAccess().getValueINTTerminalRuleCall_6_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableCondition returns VariableCondition
	 *
	 * Constraint:
	 *     (expression_left=EXPRESSION relation=RELATIONS expression_right=EXPRESSION)
	 */
	protected void sequence_VariableCondition(ISerializationContext context, VariableCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.VARIABLE_CONDITION__EXPRESSION_LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.VARIABLE_CONDITION__EXPRESSION_LEFT));
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.VARIABLE_CONDITION__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.VARIABLE_CONDITION__RELATION));
			if (transientValues.isValueTransient(semanticObject, BooleanExpressionsPackage.Literals.VARIABLE_CONDITION__EXPRESSION_RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BooleanExpressionsPackage.Literals.VARIABLE_CONDITION__EXPRESSION_RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableConditionAccess().getExpression_leftEXPRESSIONParserRuleCall_1_0(), semanticObject.getExpression_left());
		feeder.accept(grammarAccess.getVariableConditionAccess().getRelationRELATIONSTerminalRuleCall_2_0(), semanticObject.getRelation());
		feeder.accept(grammarAccess.getVariableConditionAccess().getExpression_rightEXPRESSIONParserRuleCall_3_0(), semanticObject.getExpression_right());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     booleanTerm returns booleanTerm
	 *
	 * Constraint:
	 *     (timeConstraint=TimeConstraint | booleanVariable=BooleanVariable | variableCondition=VariableCondition)
	 */
	protected void sequence_booleanTerm(ISerializationContext context, booleanTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
