/*
 * generated by Xtext
 */
package org.correttouml.grammars.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.correttouml.grammars.services.StateMachineActionsGrammarAccess;

public class StateMachineActionsParser extends AbstractContentAssistParser {
	
	@Inject
	private StateMachineActionsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineActionsParser createParser() {
		org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineActionsParser result = new org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineActionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getEXPRESSIONAccess().getAlternatives(), "rule__EXPRESSION__Alternatives");
					put(grammarAccess.getTERMAccess().getAlternatives_0(), "rule__TERM__Alternatives_0");
					put(grammarAccess.getTERMAccess().getAlternatives_1(), "rule__TERM__Alternatives_1");
					put(grammarAccess.getLinkAccess().getAlternatives(), "rule__Link__Alternatives");
					put(grammarAccess.getEventAccess().getAlternatives_1(), "rule__Event__Alternatives_1");
					put(grammarAccess.getParametersAccess().getAlternatives(), "rule__Parameters__Alternatives");
					put(grammarAccess.getParametersAccess().getAlternatives_0_0(), "rule__Parameters__Alternatives_0_0");
					put(grammarAccess.getParametersAccess().getAlternatives_1_0(), "rule__Parameters__Alternatives_1_0");
					put(grammarAccess.getEventExtensionsAccess().getAlternatives(), "rule__EventExtensions__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getEXPRESSIONAccess().getGroup_0(), "rule__EXPRESSION__Group_0__0");
					put(grammarAccess.getTERMAccess().getGroup(), "rule__TERM__Group__0");
					put(grammarAccess.getEventActionAccess().getGroup(), "rule__EventAction__Group__0");
					put(grammarAccess.getLinkAccess().getGroup_0(), "rule__Link__Group_0__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_1_1(), "rule__Event__Group_1_1__0");
					put(grammarAccess.getEventAccess().getGroup_2(), "rule__Event__Group_2__0");
					put(grammarAccess.getParametersAccess().getGroup_0(), "rule__Parameters__Group_0__0");
					put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
					put(grammarAccess.getModelAccess().getActionAssignment_0(), "rule__Model__ActionAssignment_0");
					put(grammarAccess.getModelAccess().getActionsAssignment_1_1(), "rule__Model__ActionsAssignment_1_1");
					put(grammarAccess.getActionAccess().getAssignmentAssignment_0(), "rule__Action__AssignmentAssignment_0");
					put(grammarAccess.getActionAccess().getEventActionAssignment_1(), "rule__Action__EventActionAssignment_1");
					put(grammarAccess.getAssignmentAccess().getLeftvarAssignment_0(), "rule__Assignment__LeftvarAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getEXPRESSIONAccess().getFirstTermAssignment_0_0(), "rule__EXPRESSION__FirstTermAssignment_0_0");
					put(grammarAccess.getEXPRESSIONAccess().getOperatorAssignment_0_1(), "rule__EXPRESSION__OperatorAssignment_0_1");
					put(grammarAccess.getEXPRESSIONAccess().getSecondTermAssignment_0_2(), "rule__EXPRESSION__SecondTermAssignment_0_2");
					put(grammarAccess.getEXPRESSIONAccess().getAloneAssignment_1(), "rule__EXPRESSION__AloneAssignment_1");
					put(grammarAccess.getTERMAccess().getIsPastAssignment_0_0(), "rule__TERM__IsPastAssignment_0_0");
					put(grammarAccess.getTERMAccess().getIsFutureAssignment_0_1(), "rule__TERM__IsFutureAssignment_0_1");
					put(grammarAccess.getTERMAccess().getVariableAssignment_1_0(), "rule__TERM__VariableAssignment_1_0");
					put(grammarAccess.getTERMAccess().getConstantAssignment_1_1(), "rule__TERM__ConstantAssignment_1_1");
					put(grammarAccess.getEventActionAccess().getLinkAssignment_0(), "rule__EventAction__LinkAssignment_0");
					put(grammarAccess.getEventActionAccess().getEventAssignment_1(), "rule__EventAction__EventAssignment_1");
					put(grammarAccess.getLinkAccess().getLinkNameAssignment_0_1(), "rule__Link__LinkNameAssignment_0_1");
					put(grammarAccess.getLinkAccess().getAssociationEndAssignment_0_3(), "rule__Link__AssociationEndAssignment_0_3");
					put(grammarAccess.getLinkAccess().getSelfAssignment_1(), "rule__Link__SelfAssignment_1");
					put(grammarAccess.getEventAccess().getEventNameAssignment_1_0(), "rule__Event__EventNameAssignment_1_0");
					put(grammarAccess.getEventAccess().getAssociationEndAssignment_1_1_0(), "rule__Event__AssociationEndAssignment_1_1_0");
					put(grammarAccess.getEventAccess().getOpNameAssignment_1_1_2(), "rule__Event__OpNameAssignment_1_1_2");
					put(grammarAccess.getEventAccess().getParametersAssignment_2_1(), "rule__Event__ParametersAssignment_2_1");
					put(grammarAccess.getEventAccess().getEventExtensionAssignment_4(), "rule__Event__EventExtensionAssignment_4");
					put(grammarAccess.getParametersAccess().getIsPastAssignment_0_0_0(), "rule__Parameters__IsPastAssignment_0_0_0");
					put(grammarAccess.getParametersAccess().getIsFutureAssignment_0_0_1(), "rule__Parameters__IsFutureAssignment_0_0_1");
					put(grammarAccess.getParametersAccess().getParamAssignment_0_1(), "rule__Parameters__ParamAssignment_0_1");
					put(grammarAccess.getParametersAccess().getIsPastAssignment_1_0_0(), "rule__Parameters__IsPastAssignment_1_0_0");
					put(grammarAccess.getParametersAccess().getIsFutureAssignment_1_0_1(), "rule__Parameters__IsFutureAssignment_1_0_1");
					put(grammarAccess.getParametersAccess().getParamAssignment_1_1(), "rule__Parameters__ParamAssignment_1_1");
					put(grammarAccess.getParametersAccess().getParametersAssignment_1_3(), "rule__Parameters__ParametersAssignment_1_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineActionsParser typedParser = (org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineActionsParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StateMachineActionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StateMachineActionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
