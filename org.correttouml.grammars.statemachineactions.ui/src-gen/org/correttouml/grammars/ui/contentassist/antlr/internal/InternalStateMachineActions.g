/*
 * generated by Xtext
 */
grammar InternalStateMachineActions;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.correttouml.grammars.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.correttouml.grammars.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.correttouml.grammars.services.StateMachineActionsGrammarAccess;

}

@parser::members {
 
 	private StateMachineActionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(StateMachineActionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEXPRESSION
entryRuleEXPRESSION 
:
{ before(grammarAccess.getEXPRESSIONRule()); }
	 ruleEXPRESSION
{ after(grammarAccess.getEXPRESSIONRule()); } 
	 EOF 
;

// Rule EXPRESSION
ruleEXPRESSION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEXPRESSIONAccess().getAlternatives()); }
(rule__EXPRESSION__Alternatives)
{ after(grammarAccess.getEXPRESSIONAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTERM
entryRuleTERM 
:
{ before(grammarAccess.getTERMRule()); }
	 ruleTERM
{ after(grammarAccess.getTERMRule()); } 
	 EOF 
;

// Rule TERM
ruleTERM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTERMAccess().getGroup()); }
(rule__TERM__Group__0)
{ after(grammarAccess.getTERMAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventAction
entryRuleEventAction 
:
{ before(grammarAccess.getEventActionRule()); }
	 ruleEventAction
{ after(grammarAccess.getEventActionRule()); } 
	 EOF 
;

// Rule EventAction
ruleEventAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventActionAccess().getGroup()); }
(rule__EventAction__Group__0)
{ after(grammarAccess.getEventActionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLink
entryRuleLink 
:
{ before(grammarAccess.getLinkRule()); }
	 ruleLink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule Link
ruleLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinkAccess().getAlternatives()); }
(rule__Link__Alternatives)
{ after(grammarAccess.getLinkAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameters
entryRuleParameters 
:
{ before(grammarAccess.getParametersRule()); }
	 ruleParameters
{ after(grammarAccess.getParametersRule()); } 
	 EOF 
;

// Rule Parameters
ruleParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParametersAccess().getAlternatives()); }
(rule__Parameters__Alternatives)
{ after(grammarAccess.getParametersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventExtensions
entryRuleEventExtensions 
:
{ before(grammarAccess.getEventExtensionsRule()); }
	 ruleEventExtensions
{ after(grammarAccess.getEventExtensionsRule()); } 
	 EOF 
;

// Rule EventExtensions
ruleEventExtensions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventExtensionsAccess().getAlternatives()); }
(rule__EventExtensions__Alternatives)
{ after(grammarAccess.getEventExtensionsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAssignmentAssignment_0()); }
(rule__Action__AssignmentAssignment_0)
{ after(grammarAccess.getActionAccess().getAssignmentAssignment_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getEventActionAssignment_1()); }
(rule__Action__EventActionAssignment_1)
{ after(grammarAccess.getActionAccess().getEventActionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getGroup_0()); }
(rule__EXPRESSION__Group_0__0)
{ after(grammarAccess.getEXPRESSIONAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getEXPRESSIONAccess().getAloneAssignment_1()); }
(rule__EXPRESSION__AloneAssignment_1)
{ after(grammarAccess.getEXPRESSIONAccess().getAloneAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getIsPastAssignment_0_0()); }
(rule__TERM__IsPastAssignment_0_0)
{ after(grammarAccess.getTERMAccess().getIsPastAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getTERMAccess().getIsFutureAssignment_0_1()); }
(rule__TERM__IsFutureAssignment_0_1)
{ after(grammarAccess.getTERMAccess().getIsFutureAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getVariableAssignment_1_0()); }
(rule__TERM__VariableAssignment_1_0)
{ after(grammarAccess.getTERMAccess().getVariableAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getTERMAccess().getConstantAssignment_1_1()); }
(rule__TERM__ConstantAssignment_1_1)
{ after(grammarAccess.getTERMAccess().getConstantAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getGroup_0()); }
(rule__Link__Group_0__0)
{ after(grammarAccess.getLinkAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLinkAccess().getSelfAssignment_1()); }
(rule__Link__SelfAssignment_1)
{ after(grammarAccess.getLinkAccess().getSelfAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventNameAssignment_1_0()); }
(rule__Event__EventNameAssignment_1_0)
{ after(grammarAccess.getEventAccess().getEventNameAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getGroup_1_1()); }
(rule__Event__Group_1_1__0)
{ after(grammarAccess.getEventAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getGroup_0()); }
(rule__Parameters__Group_0__0)
{ after(grammarAccess.getParametersAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getParametersAccess().getGroup_1()); }
(rule__Parameters__Group_1__0)
{ after(grammarAccess.getParametersAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getIsPastAssignment_0_0_0()); }
(rule__Parameters__IsPastAssignment_0_0_0)
{ after(grammarAccess.getParametersAccess().getIsPastAssignment_0_0_0()); }
)

    |(
{ before(grammarAccess.getParametersAccess().getIsFutureAssignment_0_0_1()); }
(rule__Parameters__IsFutureAssignment_0_0_1)
{ after(grammarAccess.getParametersAccess().getIsFutureAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getIsPastAssignment_1_0_0()); }
(rule__Parameters__IsPastAssignment_1_0_0)
{ after(grammarAccess.getParametersAccess().getIsPastAssignment_1_0_0()); }
)

    |(
{ before(grammarAccess.getParametersAccess().getIsFutureAssignment_1_0_1()); }
(rule__Parameters__IsFutureAssignment_1_0_1)
{ after(grammarAccess.getParametersAccess().getIsFutureAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventExtensions__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventExtensionsAccess().getExitKeyword_0()); }

	'exit' 

{ after(grammarAccess.getEventExtensionsAccess().getExitKeyword_0()); }
)

    |(
{ before(grammarAccess.getEventExtensionsAccess().getEnterKeyword_1()); }

	'enter' 

{ after(grammarAccess.getEventExtensionsAccess().getEnterKeyword_1()); }
)

    |(
{ before(grammarAccess.getEventExtensionsAccess().getStartKeyword_2()); }

	'start' 

{ after(grammarAccess.getEventExtensionsAccess().getStartKeyword_2()); }
)

    |(
{ before(grammarAccess.getEventExtensionsAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getEventExtensionsAccess().getEndKeyword_3()); }
)

    |(
{ before(grammarAccess.getEventExtensionsAccess().getTickKeyword_4()); }

	'tick' 

{ after(grammarAccess.getEventExtensionsAccess().getTickKeyword_4()); }
)

    |(
{ before(grammarAccess.getEventExtensionsAccess().getSigKeyword_5()); }

	'sig' 

{ after(grammarAccess.getEventExtensionsAccess().getSigKeyword_5()); }
)

    |(
{ before(grammarAccess.getEventExtensionsAccess().getCallKeyword_6()); }

	'call' 

{ after(grammarAccess.getEventExtensionsAccess().getCallKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionAssignment_0()); }
(rule__Model__ActionAssignment_0)
{ after(grammarAccess.getModelAccess().getActionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)?
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getModelAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionsAssignment_1_1()); }
(rule__Model__ActionsAssignment_1_1)
{ after(grammarAccess.getModelAccess().getActionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLeftvarAssignment_0()); }
(rule__Assignment__LeftvarAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getLeftvarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
(rule__Assignment__ExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EXPRESSION__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EXPRESSION__Group_0__0__Impl
	rule__EXPRESSION__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getFirstTermAssignment_0_0()); }
(rule__EXPRESSION__FirstTermAssignment_0_0)
{ after(grammarAccess.getEXPRESSIONAccess().getFirstTermAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EXPRESSION__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EXPRESSION__Group_0__1__Impl
	rule__EXPRESSION__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getOperatorAssignment_0_1()); }
(rule__EXPRESSION__OperatorAssignment_0_1)
{ after(grammarAccess.getEXPRESSIONAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EXPRESSION__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EXPRESSION__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getSecondTermAssignment_0_2()); }
(rule__EXPRESSION__SecondTermAssignment_0_2)
{ after(grammarAccess.getEXPRESSIONAccess().getSecondTermAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TERM__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TERM__Group__0__Impl
	rule__TERM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getAlternatives_0()); }
(rule__TERM__Alternatives_0)?
{ after(grammarAccess.getTERMAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TERM__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TERM__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getAlternatives_1()); }
(rule__TERM__Alternatives_1)
{ after(grammarAccess.getTERMAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventAction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventAction__Group__0__Impl
	rule__EventAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventAction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventActionAccess().getLinkAssignment_0()); }
(rule__EventAction__LinkAssignment_0)?
{ after(grammarAccess.getEventActionAccess().getLinkAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventAction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventAction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventAction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventActionAccess().getEventAssignment_1()); }
(rule__EventAction__EventAssignment_1)
{ after(grammarAccess.getEventActionAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Link__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group_0__0__Impl
	rule__Link__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getNumberSignKeyword_0_0()); }

	'#' 

{ after(grammarAccess.getLinkAccess().getNumberSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group_0__1__Impl
	rule__Link__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getLinkNameAssignment_0_1()); }
(rule__Link__LinkNameAssignment_0_1)
{ after(grammarAccess.getLinkAccess().getLinkNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group_0__2__Impl
	rule__Link__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getFullStopKeyword_0_2()); }

	'.' 

{ after(grammarAccess.getLinkAccess().getFullStopKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Link__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getAssociationEndAssignment_0_3()); }
(rule__Link__AssociationEndAssignment_0_3)
{ after(grammarAccess.getLinkAccess().getAssociationEndAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getEventAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAlternatives_1()); }
(rule__Event__Alternatives_1)
{ after(grammarAccess.getEventAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getGroup_2()); }
(rule__Event__Group_2__0)?
{ after(grammarAccess.getEventAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__3__Impl
	rule__Event__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getEventAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventExtensionAssignment_4()); }
(rule__Event__EventExtensionAssignment_4)
{ after(grammarAccess.getEventAccess().getEventExtensionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Event__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1_1__0__Impl
	rule__Event__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAssociationEndAssignment_1_1_0()); }
(rule__Event__AssociationEndAssignment_1_1_0)
{ after(grammarAccess.getEventAccess().getAssociationEndAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1_1__1__Impl
	rule__Event__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getFullStopKeyword_1_1_1()); }

	'.' 

{ after(grammarAccess.getEventAccess().getFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getOpNameAssignment_1_1_2()); }
(rule__Event__OpNameAssignment_1_1_2)
{ after(grammarAccess.getEventAccess().getOpNameAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Event__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_2__0__Impl
	rule__Event__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getEventAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_2__1__Impl
	rule__Event__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParametersAssignment_2_1()); }
(rule__Event__ParametersAssignment_2_1)
{ after(grammarAccess.getEventAccess().getParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getEventAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Parameters__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group_0__0__Impl
	rule__Parameters__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getAlternatives_0_0()); }
(rule__Parameters__Alternatives_0_0)?
{ after(grammarAccess.getParametersAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParamAssignment_0_1()); }
(rule__Parameters__ParamAssignment_0_1)
{ after(grammarAccess.getParametersAccess().getParamAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameters__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group_1__0__Impl
	rule__Parameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getAlternatives_1_0()); }
(rule__Parameters__Alternatives_1_0)?
{ after(grammarAccess.getParametersAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group_1__1__Impl
	rule__Parameters__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParamAssignment_1_1()); }
(rule__Parameters__ParamAssignment_1_1)
{ after(grammarAccess.getParametersAccess().getParamAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group_1__2__Impl
	rule__Parameters__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getCommaKeyword_1_2()); }

	',' 

{ after(grammarAccess.getParametersAccess().getCommaKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameters__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParametersAssignment_1_3()); }
(rule__Parameters__ParametersAssignment_1_3)
{ after(grammarAccess.getParametersAccess().getParametersAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__ActionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionActionParserRuleCall_0_0()); }
	ruleAction{ after(grammarAccess.getModelAccess().getActionActionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ActionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getActionsModelParserRuleCall_1_1_0()); }
	ruleModel{ after(grammarAccess.getModelAccess().getActionsModelParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__AssignmentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAssignmentAssignmentParserRuleCall_0_0()); }
	ruleAssignment{ after(grammarAccess.getActionAccess().getAssignmentAssignmentParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__EventActionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getEventActionEventActionParserRuleCall_1_0()); }
	ruleEventAction{ after(grammarAccess.getActionAccess().getEventActionEventActionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__LeftvarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLeftvarIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getLeftvarIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionEXPRESSIONParserRuleCall_2_0()); }
	ruleEXPRESSION{ after(grammarAccess.getAssignmentAccess().getExpressionEXPRESSIONParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__FirstTermAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getFirstTermTERMParserRuleCall_0_0_0()); }
	ruleTERM{ after(grammarAccess.getEXPRESSIONAccess().getFirstTermTERMParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getOperatorOPERATORTerminalRuleCall_0_1_0()); }
	RULE_OPERATOR{ after(grammarAccess.getEXPRESSIONAccess().getOperatorOPERATORTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__SecondTermAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getSecondTermTERMParserRuleCall_0_2_0()); }
	ruleTERM{ after(grammarAccess.getEXPRESSIONAccess().getSecondTermTERMParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__AloneAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getAloneTERMParserRuleCall_1_0()); }
	ruleTERM{ after(grammarAccess.getEXPRESSIONAccess().getAloneTERMParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__IsPastAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getIsPastYKeyword_0_0_0()); }
(
{ before(grammarAccess.getTERMAccess().getIsPastYKeyword_0_0_0()); }

	'<Y>' 

{ after(grammarAccess.getTERMAccess().getIsPastYKeyword_0_0_0()); }
)

{ after(grammarAccess.getTERMAccess().getIsPastYKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__IsFutureAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getIsFutureXKeyword_0_1_0()); }
(
{ before(grammarAccess.getTERMAccess().getIsFutureXKeyword_0_1_0()); }

	'<X>' 

{ after(grammarAccess.getTERMAccess().getIsFutureXKeyword_0_1_0()); }
)

{ after(grammarAccess.getTERMAccess().getIsFutureXKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__VariableAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getVariableIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getTERMAccess().getVariableIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__ConstantAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getConstantINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getTERMAccess().getConstantINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventAction__LinkAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventActionAccess().getLinkLinkParserRuleCall_0_0()); }
	ruleLink{ after(grammarAccess.getEventActionAccess().getLinkLinkParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventAction__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventActionAccess().getEventEventParserRuleCall_1_0()); }
	ruleEvent{ after(grammarAccess.getEventActionAccess().getEventEventParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__LinkNameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getLinkNameIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getLinkAccess().getLinkNameIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__AssociationEndAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getAssociationEndIDTerminalRuleCall_0_3_0()); }
	RULE_ID{ after(grammarAccess.getLinkAccess().getAssociationEndIDTerminalRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Link__SelfAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkAccess().getSelfSelfKeyword_1_0()); }
(
{ before(grammarAccess.getLinkAccess().getSelfSelfKeyword_1_0()); }

	'self' 

{ after(grammarAccess.getLinkAccess().getSelfSelfKeyword_1_0()); }
)

{ after(grammarAccess.getLinkAccess().getSelfSelfKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__EventNameAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_1_0_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__AssociationEndAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAssociationEndIDTerminalRuleCall_1_1_0_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getAssociationEndIDTerminalRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__OpNameAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getOpNameIDTerminalRuleCall_1_1_2_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getOpNameIDTerminalRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParametersParametersParserRuleCall_2_1_0()); }
	ruleParameters{ after(grammarAccess.getEventAccess().getParametersParametersParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__EventExtensionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventExtensionEventExtensionsParserRuleCall_4_0()); }
	ruleEventExtensions{ after(grammarAccess.getEventAccess().getEventExtensionEventExtensionsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__IsPastAssignment_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getIsPastPKeyword_0_0_0_0()); }
(
{ before(grammarAccess.getParametersAccess().getIsPastPKeyword_0_0_0_0()); }

	'<P>' 

{ after(grammarAccess.getParametersAccess().getIsPastPKeyword_0_0_0_0()); }
)

{ after(grammarAccess.getParametersAccess().getIsPastPKeyword_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__IsFutureAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getIsFutureFKeyword_0_0_1_0()); }
(
{ before(grammarAccess.getParametersAccess().getIsFutureFKeyword_0_0_1_0()); }

	'<F>' 

{ after(grammarAccess.getParametersAccess().getIsFutureFKeyword_0_0_1_0()); }
)

{ after(grammarAccess.getParametersAccess().getIsFutureFKeyword_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__ParamAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParamIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getParametersAccess().getParamIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__IsPastAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getIsPastPKeyword_1_0_0_0()); }
(
{ before(grammarAccess.getParametersAccess().getIsPastPKeyword_1_0_0_0()); }

	'<P>' 

{ after(grammarAccess.getParametersAccess().getIsPastPKeyword_1_0_0_0()); }
)

{ after(grammarAccess.getParametersAccess().getIsPastPKeyword_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__IsFutureAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getIsFutureFKeyword_1_0_1_0()); }
(
{ before(grammarAccess.getParametersAccess().getIsFutureFKeyword_1_0_1_0()); }

	'<F>' 

{ after(grammarAccess.getParametersAccess().getIsFutureFKeyword_1_0_1_0()); }
)

{ after(grammarAccess.getParametersAccess().getIsFutureFKeyword_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__ParamAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParamIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getParametersAccess().getParamIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__ParametersAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAccess().getParametersParametersParserRuleCall_1_3_0()); }
	ruleParameters{ after(grammarAccess.getParametersAccess().getParametersParametersParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_OPERATOR : ('-'|'+'|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


