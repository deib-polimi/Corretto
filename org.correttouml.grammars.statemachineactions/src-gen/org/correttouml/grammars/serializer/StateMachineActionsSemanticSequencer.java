/*
 * generated by Xtext
 */
package org.correttouml.grammars.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.correttouml.grammars.services.StateMachineActionsGrammarAccess;
import org.correttouml.grammars.stateMachineActions.Assignment;
import org.correttouml.grammars.stateMachineActions.EXPRESSION;
import org.correttouml.grammars.stateMachineActions.Event;
import org.correttouml.grammars.stateMachineActions.EventAction;
import org.correttouml.grammars.stateMachineActions.Link;
import org.correttouml.grammars.stateMachineActions.Model;
import org.correttouml.grammars.stateMachineActions.Parameters;
import org.correttouml.grammars.stateMachineActions.StateMachineActionsPackage;
import org.correttouml.grammars.stateMachineActions.TERM;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class StateMachineActionsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StateMachineActionsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StateMachineActionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StateMachineActionsPackage.ACTION:
				sequence_Action(context, (org.correttouml.grammars.stateMachineActions.Action) semanticObject); 
				return; 
			case StateMachineActionsPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case StateMachineActionsPackage.EXPRESSION:
				sequence_EXPRESSION(context, (EXPRESSION) semanticObject); 
				return; 
			case StateMachineActionsPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StateMachineActionsPackage.EVENT_ACTION:
				sequence_EventAction(context, (EventAction) semanticObject); 
				return; 
			case StateMachineActionsPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case StateMachineActionsPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case StateMachineActionsPackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case StateMachineActionsPackage.TERM:
				sequence_TERM(context, (TERM) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (assignment=Assignment | eventAction=EventAction)
	 */
	protected void sequence_Action(ISerializationContext context, org.correttouml.grammars.stateMachineActions.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (leftvar=ID expression=EXPRESSION)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineActionsPackage.Literals.ASSIGNMENT__LEFTVAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineActionsPackage.Literals.ASSIGNMENT__LEFTVAR));
			if (transientValues.isValueTransient(semanticObject, StateMachineActionsPackage.Literals.ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineActionsPackage.Literals.ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getLeftvarIDTerminalRuleCall_0_0(), semanticObject.getLeftvar());
		feeder.accept(grammarAccess.getAssignmentAccess().getExpressionEXPRESSIONParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EXPRESSION returns EXPRESSION
	 *
	 * Constraint:
	 *     ((firstTerm=TERM operator=OPERATOR secondTerm=TERM) | alone=TERM)
	 */
	protected void sequence_EXPRESSION(ISerializationContext context, EXPRESSION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventAction returns EventAction
	 *
	 * Constraint:
	 *     (link=Link? event=Event)
	 */
	protected void sequence_EventAction(ISerializationContext context, EventAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     ((eventName=ID | (associationEnd=ID opName=ID)) parameters=Parameters? eventExtension=EventExtensions)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     ((linkName=ID associationEnd=ID) | self='self')
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (action=Action actions=Model?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     (((isPast='<P>' | isFuture='<F>')? param=ID) | ((isPast='<P>' | isFuture='<F>')? param=ID parameters=Parameters))
	 */
	protected void sequence_Parameters(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TERM returns TERM
	 *
	 * Constraint:
	 *     ((isPast='<Y>' | isFuture='<X>')? (variable=ID | constant=INT))
	 */
	protected void sequence_TERM(ISerializationContext context, TERM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
