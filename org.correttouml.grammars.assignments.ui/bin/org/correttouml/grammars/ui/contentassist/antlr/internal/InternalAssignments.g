/*
 * generated by Xtext
 */
grammar InternalAssignments;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.correttouml.grammars.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.correttouml.grammars.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.correttouml.grammars.services.AssignmentsGrammarAccess;

}

@parser::members {
 
 	private AssignmentsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AssignmentsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAssignmentAssignment()); }
(rule__Model__AssignmentAssignment)
{ after(grammarAccess.getModelAccess().getAssignmentAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleASSIGNMENT
entryRuleASSIGNMENT 
:
{ before(grammarAccess.getASSIGNMENTRule()); }
	 ruleASSIGNMENT
{ after(grammarAccess.getASSIGNMENTRule()); } 
	 EOF 
;

// Rule ASSIGNMENT
ruleASSIGNMENT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getASSIGNMENTAccess().getGroup()); }
(rule__ASSIGNMENT__Group__0)
{ after(grammarAccess.getASSIGNMENTAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEXPRESSION
entryRuleEXPRESSION 
:
{ before(grammarAccess.getEXPRESSIONRule()); }
	 ruleEXPRESSION
{ after(grammarAccess.getEXPRESSIONRule()); } 
	 EOF 
;

// Rule EXPRESSION
ruleEXPRESSION
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEXPRESSIONAccess().getAlternatives()); }
(rule__EXPRESSION__Alternatives)
{ after(grammarAccess.getEXPRESSIONAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTERM
entryRuleTERM 
:
{ before(grammarAccess.getTERMRule()); }
	 ruleTERM
{ after(grammarAccess.getTERMRule()); } 
	 EOF 
;

// Rule TERM
ruleTERM
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTERMAccess().getAlternatives()); }
(rule__TERM__Alternatives)
{ after(grammarAccess.getTERMAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__EXPRESSION__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getGroup_0()); }
(rule__EXPRESSION__Group_0__0)
{ after(grammarAccess.getEXPRESSIONAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getEXPRESSIONAccess().getAloneAssignment_1()); }
(rule__EXPRESSION__AloneAssignment_1)
{ after(grammarAccess.getEXPRESSIONAccess().getAloneAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getVariableAssignment_0()); }
(rule__TERM__VariableAssignment_0)
{ after(grammarAccess.getTERMAccess().getVariableAssignment_0()); }
)

    |(
{ before(grammarAccess.getTERMAccess().getConstantAssignment_1()); }
(rule__TERM__ConstantAssignment_1)
{ after(grammarAccess.getTERMAccess().getConstantAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ASSIGNMENT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASSIGNMENT__Group__0__Impl
	rule__ASSIGNMENT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ASSIGNMENT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASSIGNMENTAccess().getVariableAssignment_0()); }
(rule__ASSIGNMENT__VariableAssignment_0)
{ after(grammarAccess.getASSIGNMENTAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASSIGNMENT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASSIGNMENT__Group__1__Impl
	rule__ASSIGNMENT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ASSIGNMENT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASSIGNMENTAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getASSIGNMENTAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ASSIGNMENT__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ASSIGNMENT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ASSIGNMENT__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASSIGNMENTAccess().getExpressionAssignment_2()); }
(rule__ASSIGNMENT__ExpressionAssignment_2)
{ after(grammarAccess.getASSIGNMENTAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EXPRESSION__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EXPRESSION__Group_0__0__Impl
	rule__EXPRESSION__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getFirstTermAssignment_0_0()); }
(rule__EXPRESSION__FirstTermAssignment_0_0)
{ after(grammarAccess.getEXPRESSIONAccess().getFirstTermAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EXPRESSION__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EXPRESSION__Group_0__1__Impl
	rule__EXPRESSION__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getOperatorAssignment_0_1()); }
(rule__EXPRESSION__OperatorAssignment_0_1)
{ after(grammarAccess.getEXPRESSIONAccess().getOperatorAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EXPRESSION__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EXPRESSION__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getSecondTermAssignment_0_2()); }
(rule__EXPRESSION__SecondTermAssignment_0_2)
{ after(grammarAccess.getEXPRESSIONAccess().getSecondTermAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__AssignmentAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAssignmentASSIGNMENTParserRuleCall_0()); }
	ruleASSIGNMENT{ after(grammarAccess.getModelAccess().getAssignmentASSIGNMENTParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASSIGNMENT__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASSIGNMENTAccess().getVariableIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getASSIGNMENTAccess().getVariableIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ASSIGNMENT__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getASSIGNMENTAccess().getExpressionEXPRESSIONParserRuleCall_2_0()); }
	ruleEXPRESSION{ after(grammarAccess.getASSIGNMENTAccess().getExpressionEXPRESSIONParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__FirstTermAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getFirstTermTERMParserRuleCall_0_0_0()); }
	ruleTERM{ after(grammarAccess.getEXPRESSIONAccess().getFirstTermTERMParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__OperatorAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getOperatorOPERATORTerminalRuleCall_0_1_0()); }
	RULE_OPERATOR{ after(grammarAccess.getEXPRESSIONAccess().getOperatorOPERATORTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__SecondTermAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getSecondTermTERMParserRuleCall_0_2_0()); }
	ruleTERM{ after(grammarAccess.getEXPRESSIONAccess().getSecondTermTERMParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EXPRESSION__AloneAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEXPRESSIONAccess().getAloneTERMParserRuleCall_1_0()); }
	ruleTERM{ after(grammarAccess.getEXPRESSIONAccess().getAloneTERMParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getVariableIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTERMAccess().getVariableIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TERM__ConstantAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTERMAccess().getConstantINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getTERMAccess().getConstantINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_OPERATOR : ('-'|'+'|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


