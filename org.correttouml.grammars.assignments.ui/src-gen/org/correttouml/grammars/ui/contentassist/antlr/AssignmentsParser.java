/*
 * generated by Xtext
 */
package org.correttouml.grammars.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.correttouml.grammars.services.AssignmentsGrammarAccess;

public class AssignmentsParser extends AbstractContentAssistParser {
	
	@Inject
	private AssignmentsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.correttouml.grammars.ui.contentassist.antlr.internal.InternalAssignmentsParser createParser() {
		org.correttouml.grammars.ui.contentassist.antlr.internal.InternalAssignmentsParser result = new org.correttouml.grammars.ui.contentassist.antlr.internal.InternalAssignmentsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEXPRESSIONAccess().getAlternatives(), "rule__EXPRESSION__Alternatives");
					put(grammarAccess.getTERMAccess().getAlternatives(), "rule__TERM__Alternatives");
					put(grammarAccess.getASSIGNMENTAccess().getGroup(), "rule__ASSIGNMENT__Group__0");
					put(grammarAccess.getEXPRESSIONAccess().getGroup_0(), "rule__EXPRESSION__Group_0__0");
					put(grammarAccess.getModelAccess().getAssignmentAssignment(), "rule__Model__AssignmentAssignment");
					put(grammarAccess.getASSIGNMENTAccess().getVariableAssignment_0(), "rule__ASSIGNMENT__VariableAssignment_0");
					put(grammarAccess.getASSIGNMENTAccess().getExpressionAssignment_2(), "rule__ASSIGNMENT__ExpressionAssignment_2");
					put(grammarAccess.getEXPRESSIONAccess().getFirstTermAssignment_0_0(), "rule__EXPRESSION__FirstTermAssignment_0_0");
					put(grammarAccess.getEXPRESSIONAccess().getOperatorAssignment_0_1(), "rule__EXPRESSION__OperatorAssignment_0_1");
					put(grammarAccess.getEXPRESSIONAccess().getSecondTermAssignment_0_2(), "rule__EXPRESSION__SecondTermAssignment_0_2");
					put(grammarAccess.getEXPRESSIONAccess().getAloneAssignment_1(), "rule__EXPRESSION__AloneAssignment_1");
					put(grammarAccess.getTERMAccess().getVariableAssignment_0(), "rule__TERM__VariableAssignment_0");
					put(grammarAccess.getTERMAccess().getConstantAssignment_1(), "rule__TERM__ConstantAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.correttouml.grammars.ui.contentassist.antlr.internal.InternalAssignmentsParser typedParser = (org.correttouml.grammars.ui.contentassist.antlr.internal.InternalAssignmentsParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AssignmentsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AssignmentsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	public void initializeFor(AbstractRule rule) {
		// TODO Auto-generated method stub
		
	}
}
