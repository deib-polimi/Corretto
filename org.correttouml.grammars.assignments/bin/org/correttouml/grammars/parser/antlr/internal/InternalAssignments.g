/*
 * generated by Xtext
 */
grammar InternalAssignments;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.correttouml.grammars.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.correttouml.grammars.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.correttouml.grammars.services.AssignmentsGrammarAccess;

}

@parser::members {

 	private AssignmentsGrammarAccess grammarAccess;
 	
    public InternalAssignmentsParser(TokenStream input, AssignmentsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AssignmentsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAssignmentASSIGNMENTParserRuleCall_0()); 
	    }
		lv_assignment_0_0=ruleASSIGNMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"assignment",
        		lv_assignment_0_0, 
        		"org.correttouml.grammars.Assignments.ASSIGNMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleASSIGNMENT
entryRuleASSIGNMENT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASSIGNMENTRule()); }
	 iv_ruleASSIGNMENT=ruleASSIGNMENT 
	 { $current=$iv_ruleASSIGNMENT.current; } 
	 EOF 
;

// Rule ASSIGNMENT
ruleASSIGNMENT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variable_0_0=RULE_ID
		{
			newLeafNode(lv_variable_0_0, grammarAccess.getASSIGNMENTAccess().getVariableIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASSIGNMENTRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASSIGNMENTAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASSIGNMENTAccess().getExpressionEXPRESSIONParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleEXPRESSION		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASSIGNMENTRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"org.correttouml.grammars.Assignments.EXPRESSION");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEXPRESSION
entryRuleEXPRESSION returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPRESSIONRule()); }
	 iv_ruleEXPRESSION=ruleEXPRESSION 
	 { $current=$iv_ruleEXPRESSION.current; } 
	 EOF 
;

// Rule EXPRESSION
ruleEXPRESSION returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRESSIONAccess().getFirstTermTERMParserRuleCall_0_0_0()); 
	    }
		lv_firstTerm_0_0=ruleTERM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRESSIONRule());
	        }
       		set(
       			$current, 
       			"firstTerm",
        		lv_firstTerm_0_0, 
        		"org.correttouml.grammars.Assignments.TERM");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_operator_1_0=RULE_OPERATOR
		{
			newLeafNode(lv_operator_1_0, grammarAccess.getEXPRESSIONAccess().getOperatorOPERATORTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEXPRESSIONRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"org.correttouml.grammars.Assignments.OPERATOR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRESSIONAccess().getSecondTermTERMParserRuleCall_0_2_0()); 
	    }
		lv_secondTerm_2_0=ruleTERM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRESSIONRule());
	        }
       		set(
       			$current, 
       			"secondTerm",
        		lv_secondTerm_2_0, 
        		"org.correttouml.grammars.Assignments.TERM");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEXPRESSIONAccess().getAloneTERMParserRuleCall_1_0()); 
	    }
		lv_alone_3_0=ruleTERM		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEXPRESSIONRule());
	        }
       		set(
       			$current, 
       			"alone",
        		lv_alone_3_0, 
        		"org.correttouml.grammars.Assignments.TERM");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTERM
entryRuleTERM returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTERMRule()); }
	 iv_ruleTERM=ruleTERM 
	 { $current=$iv_ruleTERM.current; } 
	 EOF 
;

// Rule TERM
ruleTERM returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_variable_0_0=RULE_ID
		{
			newLeafNode(lv_variable_0_0, grammarAccess.getTERMAccess().getVariableIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTERMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |(
(
		lv_constant_1_0=RULE_INT
		{
			newLeafNode(lv_constant_1_0, grammarAccess.getTERMAccess().getConstantINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTERMRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constant",
        		lv_constant_1_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
))
;





RULE_OPERATOR : ('-'|'+'|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


