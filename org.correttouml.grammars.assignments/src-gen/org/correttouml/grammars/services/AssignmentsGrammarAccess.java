/*
 * generated by Xtext
 */
package org.correttouml.grammars.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AssignmentsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Assignments.Model");
		private final Assignment cAssignmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssignmentASSIGNMENTParserRuleCall_0 = (RuleCall)cAssignmentAssignment.eContents().get(0);
		
		/// *
		// * Right now an assignment can only be an arithmetic expression
		// * THis is not completely true because actually we can assign the value
		// * of a boolean variable, or a boolean expression to another boolean variable
		// * e.g. bool_var= bool_A && bool_B
		// * This is left to future development
		// * / Model:
		//	assignment=ASSIGNMENT;
		public ParserRule getRule() { return rule; }

		//assignment=ASSIGNMENT
		public Assignment getAssignmentAssignment() { return cAssignmentAssignment; }

		//ASSIGNMENT
		public RuleCall getAssignmentASSIGNMENTParserRuleCall_0() { return cAssignmentASSIGNMENTParserRuleCall_0; }
	}

	public class ASSIGNMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Assignments.ASSIGNMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionEXPRESSIONParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ASSIGNMENT:
		//	variable=ID "=" expression=EXPRESSION;
		public ParserRule getRule() { return rule; }

		//variable=ID "=" expression=EXPRESSION
		public Group getGroup() { return cGroup; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=EXPRESSION
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//EXPRESSION
		public RuleCall getExpressionEXPRESSIONParserRuleCall_2_0() { return cExpressionEXPRESSIONParserRuleCall_2_0; }
	}

	public class EXPRESSIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Assignments.EXPRESSION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstTermAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstTermTERMParserRuleCall_0_0_0 = (RuleCall)cFirstTermAssignment_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOPERATORTerminalRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSecondTermAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSecondTermTERMParserRuleCall_0_2_0 = (RuleCall)cSecondTermAssignment_0_2.eContents().get(0);
		private final Assignment cAloneAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAloneTERMParserRuleCall_1_0 = (RuleCall)cAloneAssignment_1.eContents().get(0);
		
		//EXPRESSION:
		//	firstTerm=TERM operator=OPERATOR secondTerm=TERM | alone=TERM;
		public ParserRule getRule() { return rule; }

		//firstTerm=TERM operator=OPERATOR secondTerm=TERM | alone=TERM
		public Alternatives getAlternatives() { return cAlternatives; }

		//firstTerm=TERM operator=OPERATOR secondTerm=TERM
		public Group getGroup_0() { return cGroup_0; }

		//firstTerm=TERM
		public Assignment getFirstTermAssignment_0_0() { return cFirstTermAssignment_0_0; }

		//TERM
		public RuleCall getFirstTermTERMParserRuleCall_0_0_0() { return cFirstTermTERMParserRuleCall_0_0_0; }

		//operator=OPERATOR
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//OPERATOR
		public RuleCall getOperatorOPERATORTerminalRuleCall_0_1_0() { return cOperatorOPERATORTerminalRuleCall_0_1_0; }

		//secondTerm=TERM
		public Assignment getSecondTermAssignment_0_2() { return cSecondTermAssignment_0_2; }

		//TERM
		public RuleCall getSecondTermTERMParserRuleCall_0_2_0() { return cSecondTermTERMParserRuleCall_0_2_0; }

		//alone=TERM
		public Assignment getAloneAssignment_1() { return cAloneAssignment_1; }

		//TERM
		public RuleCall getAloneTERMParserRuleCall_1_0() { return cAloneTERMParserRuleCall_1_0; }
	}

	public class TERMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Assignments.TERM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableIDTerminalRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		
		//TERM:
		//	variable=ID | constant=INT;
		public ParserRule getRule() { return rule; }

		//variable=ID | constant=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=ID
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//ID
		public RuleCall getVariableIDTerminalRuleCall_0_0() { return cVariableIDTerminalRuleCall_0_0; }

		//constant=INT
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//INT
		public RuleCall getConstantINTTerminalRuleCall_1_0() { return cConstantINTTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ASSIGNMENTElements pASSIGNMENT;
	private final EXPRESSIONElements pEXPRESSION;
	private final TERMElements pTERM;
	private final TerminalRule tOPERATOR;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AssignmentsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pASSIGNMENT = new ASSIGNMENTElements();
		this.pEXPRESSION = new EXPRESSIONElements();
		this.pTERM = new TERMElements();
		this.tOPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Assignments.OPERATOR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.correttouml.grammars.Assignments".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Right now an assignment can only be an arithmetic expression
	// * THis is not completely true because actually we can assign the value
	// * of a boolean variable, or a boolean expression to another boolean variable
	// * e.g. bool_var= bool_A && bool_B
	// * This is left to future development
	// * / Model:
	//	assignment=ASSIGNMENT;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ASSIGNMENT:
	//	variable=ID "=" expression=EXPRESSION;
	public ASSIGNMENTElements getASSIGNMENTAccess() {
		return pASSIGNMENT;
	}
	
	public ParserRule getASSIGNMENTRule() {
		return getASSIGNMENTAccess().getRule();
	}

	//EXPRESSION:
	//	firstTerm=TERM operator=OPERATOR secondTerm=TERM | alone=TERM;
	public EXPRESSIONElements getEXPRESSIONAccess() {
		return pEXPRESSION;
	}
	
	public ParserRule getEXPRESSIONRule() {
		return getEXPRESSIONAccess().getRule();
	}

	//TERM:
	//	variable=ID | constant=INT;
	public TERMElements getTERMAccess() {
		return pTERM;
	}
	
	public ParserRule getTERMRule() {
		return getTERMAccess().getRule();
	}

	//terminal OPERATOR:
	//	'-' | '+' | '*';
	public TerminalRule getOPERATORRule() {
		return tOPERATOR;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
