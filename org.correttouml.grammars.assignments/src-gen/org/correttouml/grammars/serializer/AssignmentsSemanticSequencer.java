/*
 * generated by Xtext
 */
package org.correttouml.grammars.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.correttouml.grammars.assignments.ASSIGNMENT;
import org.correttouml.grammars.assignments.AssignmentsPackage;
import org.correttouml.grammars.assignments.EXPRESSION;
import org.correttouml.grammars.assignments.Model;
import org.correttouml.grammars.assignments.TERM;
import org.correttouml.grammars.services.AssignmentsGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AssignmentsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AssignmentsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AssignmentsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AssignmentsPackage.ASSIGNMENT:
				sequence_ASSIGNMENT(context, (ASSIGNMENT) semanticObject); 
				return; 
			case AssignmentsPackage.EXPRESSION:
				sequence_EXPRESSION(context, (EXPRESSION) semanticObject); 
				return; 
			case AssignmentsPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AssignmentsPackage.TERM:
				sequence_TERM(context, (TERM) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ASSIGNMENT returns ASSIGNMENT
	 *
	 * Constraint:
	 *     (variable=ID expression=EXPRESSION)
	 */
	protected void sequence_ASSIGNMENT(ISerializationContext context, ASSIGNMENT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AssignmentsPackage.Literals.ASSIGNMENT__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssignmentsPackage.Literals.ASSIGNMENT__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, AssignmentsPackage.Literals.ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssignmentsPackage.Literals.ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getASSIGNMENTAccess().getVariableIDTerminalRuleCall_0_0(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getASSIGNMENTAccess().getExpressionEXPRESSIONParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EXPRESSION returns EXPRESSION
	 *
	 * Constraint:
	 *     ((firstTerm=TERM operator=OPERATOR secondTerm=TERM) | alone=TERM)
	 */
	protected void sequence_EXPRESSION(ISerializationContext context, EXPRESSION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     assignment=ASSIGNMENT
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AssignmentsPackage.Literals.MODEL__ASSIGNMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AssignmentsPackage.Literals.MODEL__ASSIGNMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getAssignmentASSIGNMENTParserRuleCall_0(), semanticObject.getAssignment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TERM returns TERM
	 *
	 * Constraint:
	 *     (variable=ID | constant=INT)
	 */
	protected void sequence_TERM(ISerializationContext context, TERM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
