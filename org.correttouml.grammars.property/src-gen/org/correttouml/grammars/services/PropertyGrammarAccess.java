/*
 * generated by Xtext
 */
package org.correttouml.grammars.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PropertyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationsAssignment_0.eContents().get(0);
		private final Assignment cCorrettoCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCorrettoCommandCorrettoParserRuleCall_1_0 = (RuleCall)cCorrettoCommandAssignment_1.eContents().get(0);
		
		//Model:
		//	declarations+=Declaration* correttoCommand=Corretto;
		public ParserRule getRule() { return rule; }

		//declarations+=Declaration* correttoCommand=Corretto
		public Group getGroup() { return cGroup; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_0() { return cDeclarationsAssignment_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0_0() { return cDeclarationsDeclarationParserRuleCall_0_0; }

		//correttoCommand=Corretto
		public Assignment getCorrettoCommandAssignment_1() { return cCorrettoCommandAssignment_1; }

		//Corretto
		public RuleCall getCorrettoCommandCorrettoParserRuleCall_1_0() { return cCorrettoCommandCorrettoParserRuleCall_1_0; }
	}

	public class CorrettoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.Corretto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCorrettoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVerifyAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVerifyVerifyParserRuleCall_1_0_0 = (RuleCall)cVerifyAssignment_1_0.eContents().get(0);
		private final Assignment cExecuteAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cExecuteEXECUTETerminalRuleCall_1_1_0 = (RuleCall)cExecuteAssignment_1_1.eContents().get(0);
		
		//Corretto:
		//	'Corretto.' (verify=Verify | execute=EXECUTE);
		public ParserRule getRule() { return rule; }

		//'Corretto.' (verify=Verify | execute=EXECUTE)
		public Group getGroup() { return cGroup; }

		//'Corretto.'
		public Keyword getCorrettoKeyword_0() { return cCorrettoKeyword_0; }

		//(verify=Verify | execute=EXECUTE)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//verify=Verify
		public Assignment getVerifyAssignment_1_0() { return cVerifyAssignment_1_0; }

		//Verify
		public RuleCall getVerifyVerifyParserRuleCall_1_0_0() { return cVerifyVerifyParserRuleCall_1_0_0; }

		//execute=EXECUTE
		public Assignment getExecuteAssignment_1_1() { return cExecuteAssignment_1_1; }

		//EXECUTE
		public RuleCall getExecuteEXECUTETerminalRuleCall_1_1_0() { return cExecuteEXECUTETerminalRuleCall_1_1_0; }
	}

	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTrioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTrioTRIOParserRuleCall_1_0 = (RuleCall)cTrioAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Verify:
		//	'verify(' trio=TRIO ')';
		public ParserRule getRule() { return rule; }

		//'verify(' trio=TRIO ')'
		public Group getGroup() { return cGroup; }

		//'verify('
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }

		//trio=TRIO
		public Assignment getTrioAssignment_1() { return cTrioAssignment_1; }

		//TRIO
		public RuleCall getTrioTRIOParserRuleCall_1_0() { return cTrioTRIOParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStateNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStateNameIDTerminalRuleCall_0_0_0 = (RuleCall)cStateNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cObjAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cObjIDTerminalRuleCall_0_2_0 = (RuleCall)cObjAssignment_0_2.eContents().get(0);
		private final Keyword cGetStateKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStdAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStdIDTerminalRuleCall_0_4_0 = (RuleCall)cStdAssignment_0_4.eContents().get(0);
		private final Keyword cCommaKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cUMLStateNameAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cUMLStateNameIDTerminalRuleCall_0_6_0 = (RuleCall)cUMLStateNameAssignment_0_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTrioVarAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTrioVarIDTerminalRuleCall_1_0_0 = (RuleCall)cTrioVarAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cTrioAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cTrioTRIOParserRuleCall_1_2_0_0 = (RuleCall)cTrioAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Assignment cObjAssignment_1_2_1_0 = (Assignment)cGroup_1_2_1.eContents().get(0);
		private final RuleCall cObjIDTerminalRuleCall_1_2_1_0_0 = (RuleCall)cObjAssignment_1_2_1_0.eContents().get(0);
		private final Keyword cInKeyword_1_2_1_1 = (Keyword)cGroup_1_2_1.eContents().get(1);
		private final Assignment cStateNameAssignment_1_2_1_2 = (Assignment)cGroup_1_2_1.eContents().get(2);
		private final RuleCall cStateNameIDTerminalRuleCall_1_2_1_2_0 = (RuleCall)cStateNameAssignment_1_2_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_1_3 = (Keyword)cGroup_1_2_1.eContents().get(3);
		
		//Declaration:
		//	stateName=ID '=' obj=ID '.getState(' std=ID ',' uMLStateName=ID ')' | trioVar=ID '=' (trio=TRIO | obj=ID '.in('
		//	stateName=ID ')');
		public ParserRule getRule() { return rule; }

		//stateName=ID '=' obj=ID '.getState(' std=ID ',' uMLStateName=ID ')' | trioVar=ID '=' (trio=TRIO | obj=ID '.in('
		//stateName=ID ')')
		public Alternatives getAlternatives() { return cAlternatives; }

		//stateName=ID '=' obj=ID '.getState(' std=ID ',' uMLStateName=ID ')'
		public Group getGroup_0() { return cGroup_0; }

		//stateName=ID
		public Assignment getStateNameAssignment_0_0() { return cStateNameAssignment_0_0; }

		//ID
		public RuleCall getStateNameIDTerminalRuleCall_0_0_0() { return cStateNameIDTerminalRuleCall_0_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//obj=ID
		public Assignment getObjAssignment_0_2() { return cObjAssignment_0_2; }

		//ID
		public RuleCall getObjIDTerminalRuleCall_0_2_0() { return cObjIDTerminalRuleCall_0_2_0; }

		//'.getState('
		public Keyword getGetStateKeyword_0_3() { return cGetStateKeyword_0_3; }

		//std=ID
		public Assignment getStdAssignment_0_4() { return cStdAssignment_0_4; }

		//ID
		public RuleCall getStdIDTerminalRuleCall_0_4_0() { return cStdIDTerminalRuleCall_0_4_0; }

		//','
		public Keyword getCommaKeyword_0_5() { return cCommaKeyword_0_5; }

		//uMLStateName=ID
		public Assignment getUMLStateNameAssignment_0_6() { return cUMLStateNameAssignment_0_6; }

		//ID
		public RuleCall getUMLStateNameIDTerminalRuleCall_0_6_0() { return cUMLStateNameIDTerminalRuleCall_0_6_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_7() { return cRightParenthesisKeyword_0_7; }

		//trioVar=ID '=' (trio=TRIO | obj=ID '.in(' stateName=ID ')')
		public Group getGroup_1() { return cGroup_1; }

		//trioVar=ID
		public Assignment getTrioVarAssignment_1_0() { return cTrioVarAssignment_1_0; }

		//ID
		public RuleCall getTrioVarIDTerminalRuleCall_1_0_0() { return cTrioVarIDTerminalRuleCall_1_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//(trio=TRIO | obj=ID '.in(' stateName=ID ')')
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//trio=TRIO
		public Assignment getTrioAssignment_1_2_0() { return cTrioAssignment_1_2_0; }

		//TRIO
		public RuleCall getTrioTRIOParserRuleCall_1_2_0_0() { return cTrioTRIOParserRuleCall_1_2_0_0; }

		//obj=ID '.in(' stateName=ID ')'
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//obj=ID
		public Assignment getObjAssignment_1_2_1_0() { return cObjAssignment_1_2_1_0; }

		//ID
		public RuleCall getObjIDTerminalRuleCall_1_2_1_0_0() { return cObjIDTerminalRuleCall_1_2_1_0_0; }

		//'.in('
		public Keyword getInKeyword_1_2_1_1() { return cInKeyword_1_2_1_1; }

		//stateName=ID
		public Assignment getStateNameAssignment_1_2_1_2() { return cStateNameAssignment_1_2_1_2; }

		//ID
		public RuleCall getStateNameIDTerminalRuleCall_1_2_1_2_0() { return cStateNameIDTerminalRuleCall_1_2_1_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2_1_3() { return cRightParenthesisKeyword_1_2_1_3; }
	}

	public class TRIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIO");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrioLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTrioLTRIOLParserRuleCall_0_0 = (RuleCall)cTrioLAssignment_0.eContents().get(0);
		private final Assignment cTrioRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTrioRTRIORParserRuleCall_1_0 = (RuleCall)cTrioRAssignment_1.eContents().get(0);
		
		//TRIO:
		//	trioL=TRIOL trioR=TRIOR?;
		public ParserRule getRule() { return rule; }

		//trioL=TRIOL trioR=TRIOR?
		public Group getGroup() { return cGroup; }

		//trioL=TRIOL
		public Assignment getTrioLAssignment_0() { return cTrioLAssignment_0; }

		//TRIOL
		public RuleCall getTrioLTRIOLParserRuleCall_0_0() { return cTrioLTRIOLParserRuleCall_0_0; }

		//trioR=TRIOR?
		public Assignment getTrioRAssignment_1() { return cTrioRAssignment_1; }

		//TRIOR
		public RuleCall getTrioRTRIORParserRuleCall_1_0() { return cTrioRTRIORParserRuleCall_1_0; }
	}

	public class TRIOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTrioVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTrioVarIDTerminalRuleCall_0_0_0 = (RuleCall)cTrioVarAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOpNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOpNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cOpNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cArithBoolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArithBoolArithBoolParserRuleCall_1_0 = (RuleCall)cArithBoolAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTrioNotAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTrioNotTRIOParserRuleCall_2_1_0 = (RuleCall)cTrioNotAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cTimeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTrioOpFAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTrioOpFTRIOOPFTerminalRuleCall_3_1_0 = (RuleCall)cTrioOpFAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTrioOpF1Assignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTrioOpF1TRIOParserRuleCall_3_3_0 = (RuleCall)cTrioOpF1Assignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cTimeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTrioOpFFAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTrioOpFFTRIOOPFFTerminalRuleCall_4_1_0 = (RuleCall)cTrioOpFFAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTrioOpFF1Assignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTrioOpFF1TRIOParserRuleCall_4_3_0 = (RuleCall)cTrioOpFF1Assignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cTrioOpFF2Assignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cTrioOpFF2TRIOParserRuleCall_4_5_0 = (RuleCall)cTrioOpFF2Assignment_4_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cTimeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTrioOpFNAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTrioOpFNTRIOOPFNTerminalRuleCall_5_1_0 = (RuleCall)cTrioOpFNAssignment_5_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cTrioOpFN1Assignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cTrioOpFN1TRIOParserRuleCall_5_3_0 = (RuleCall)cTrioOpFN1Assignment_5_3.eContents().get(0);
		private final Keyword cCommaKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cIntAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cIntINTTerminalRuleCall_5_5_0 = (RuleCall)cIntAssignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		
		//TRIOL:
		//	trioVar=ID (opName=ID '()')? | arithBool=ArithBool |
		//	'!(' trioNot=TRIO ')' |
		//	'Time.' trioOpF=TRIOOPF '(' trioOpF1=TRIO ')' |
		//	'Time.' trioOpFF=TRIOOPFF '(' trioOpFF1=TRIO ',' trioOpFF2=TRIO ')' |
		//	'Time.' trioOpFN=TRIOOPFN '(' trioOpFN1=TRIO ',' int=INT ')';
		public ParserRule getRule() { return rule; }

		//trioVar=ID (opName=ID '()')? | arithBool=ArithBool | '!(' trioNot=TRIO ')' | 'Time.' trioOpF=TRIOOPF '(' trioOpF1=TRIO
		//')' | 'Time.' trioOpFF=TRIOOPFF '(' trioOpFF1=TRIO ',' trioOpFF2=TRIO ')' | 'Time.' trioOpFN=TRIOOPFN '('
		//trioOpFN1=TRIO ',' int=INT ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//trioVar=ID (opName=ID '()')?
		public Group getGroup_0() { return cGroup_0; }

		//trioVar=ID
		public Assignment getTrioVarAssignment_0_0() { return cTrioVarAssignment_0_0; }

		//ID
		public RuleCall getTrioVarIDTerminalRuleCall_0_0_0() { return cTrioVarIDTerminalRuleCall_0_0_0; }

		//(opName=ID '()')?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//opName=ID
		public Assignment getOpNameAssignment_0_1_0() { return cOpNameAssignment_0_1_0; }

		//ID
		public RuleCall getOpNameIDTerminalRuleCall_0_1_0_0() { return cOpNameIDTerminalRuleCall_0_1_0_0; }

		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_1_1() { return cLeftParenthesisRightParenthesisKeyword_0_1_1; }

		////xtext consumes '^' between two IDs. E.g. if TRIOL=obj1^op1(), then trioVar=obj1, and opName=op1. // If there is no definition for trioVar, it is a <<signal>>. (Time.neverTrue(failure))
		//arithBool=ArithBool
		public Assignment getArithBoolAssignment_1() { return cArithBoolAssignment_1; }

		//ArithBool
		public RuleCall getArithBoolArithBoolParserRuleCall_1_0() { return cArithBoolArithBoolParserRuleCall_1_0; }

		//'!(' trioNot=TRIO ')'
		public Group getGroup_2() { return cGroup_2; }

		//'!('
		public Keyword getExclamationMarkLeftParenthesisKeyword_2_0() { return cExclamationMarkLeftParenthesisKeyword_2_0; }

		//trioNot=TRIO
		public Assignment getTrioNotAssignment_2_1() { return cTrioNotAssignment_2_1; }

		//TRIO
		public RuleCall getTrioNotTRIOParserRuleCall_2_1_0() { return cTrioNotTRIOParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//'Time.' trioOpF=TRIOOPF '(' trioOpF1=TRIO ')'
		public Group getGroup_3() { return cGroup_3; }

		//'Time.'
		public Keyword getTimeKeyword_3_0() { return cTimeKeyword_3_0; }

		//trioOpF=TRIOOPF
		public Assignment getTrioOpFAssignment_3_1() { return cTrioOpFAssignment_3_1; }

		//TRIOOPF
		public RuleCall getTrioOpFTRIOOPFTerminalRuleCall_3_1_0() { return cTrioOpFTRIOOPFTerminalRuleCall_3_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//trioOpF1=TRIO
		public Assignment getTrioOpF1Assignment_3_3() { return cTrioOpF1Assignment_3_3; }

		//TRIO
		public RuleCall getTrioOpF1TRIOParserRuleCall_3_3_0() { return cTrioOpF1TRIOParserRuleCall_3_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//'Time.' trioOpFF=TRIOOPFF '(' trioOpFF1=TRIO ',' trioOpFF2=TRIO ')'
		public Group getGroup_4() { return cGroup_4; }

		//'Time.'
		public Keyword getTimeKeyword_4_0() { return cTimeKeyword_4_0; }

		//trioOpFF=TRIOOPFF
		public Assignment getTrioOpFFAssignment_4_1() { return cTrioOpFFAssignment_4_1; }

		//TRIOOPFF
		public RuleCall getTrioOpFFTRIOOPFFTerminalRuleCall_4_1_0() { return cTrioOpFFTRIOOPFFTerminalRuleCall_4_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//trioOpFF1=TRIO
		public Assignment getTrioOpFF1Assignment_4_3() { return cTrioOpFF1Assignment_4_3; }

		//TRIO
		public RuleCall getTrioOpFF1TRIOParserRuleCall_4_3_0() { return cTrioOpFF1TRIOParserRuleCall_4_3_0; }

		//','
		public Keyword getCommaKeyword_4_4() { return cCommaKeyword_4_4; }

		//trioOpFF2=TRIO
		public Assignment getTrioOpFF2Assignment_4_5() { return cTrioOpFF2Assignment_4_5; }

		//TRIO
		public RuleCall getTrioOpFF2TRIOParserRuleCall_4_5_0() { return cTrioOpFF2TRIOParserRuleCall_4_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_6() { return cRightParenthesisKeyword_4_6; }

		//'Time.' trioOpFN=TRIOOPFN '(' trioOpFN1=TRIO ',' int=INT ')'
		public Group getGroup_5() { return cGroup_5; }

		//'Time.'
		public Keyword getTimeKeyword_5_0() { return cTimeKeyword_5_0; }

		//trioOpFN=TRIOOPFN
		public Assignment getTrioOpFNAssignment_5_1() { return cTrioOpFNAssignment_5_1; }

		//TRIOOPFN
		public RuleCall getTrioOpFNTRIOOPFNTerminalRuleCall_5_1_0() { return cTrioOpFNTRIOOPFNTerminalRuleCall_5_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//trioOpFN1=TRIO
		public Assignment getTrioOpFN1Assignment_5_3() { return cTrioOpFN1Assignment_5_3; }

		//TRIO
		public RuleCall getTrioOpFN1TRIOParserRuleCall_5_3_0() { return cTrioOpFN1TRIOParserRuleCall_5_3_0; }

		//','
		public Keyword getCommaKeyword_5_4() { return cCommaKeyword_5_4; }

		//int=INT
		public Assignment getIntAssignment_5_5() { return cIntAssignment_5_5; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_5_5_0() { return cIntINTTerminalRuleCall_5_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
	}

	public class TRIORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTrioOP2Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTrioOP2TRIOOP2TerminalRuleCall_0_0 = (RuleCall)cTrioOP2Assignment_0.eContents().get(0);
		private final Assignment cTrioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTrioTRIOParserRuleCall_1_0 = (RuleCall)cTrioAssignment_1.eContents().get(0);
		
		//TRIOR:
		//	trioOP2=TRIOOP2 trio=TRIO;
		public ParserRule getRule() { return rule; }

		//trioOP2=TRIOOP2 trio=TRIO
		public Group getGroup() { return cGroup; }

		//trioOP2=TRIOOP2
		public Assignment getTrioOP2Assignment_0() { return cTrioOP2Assignment_0; }

		//TRIOOP2
		public RuleCall getTrioOP2TRIOOP2TerminalRuleCall_0_0() { return cTrioOP2TRIOOP2TerminalRuleCall_0_0; }

		//trio=TRIO
		public Assignment getTrioAssignment_1() { return cTrioAssignment_1; }

		//TRIO
		public RuleCall getTrioTRIOParserRuleCall_1_0() { return cTrioTRIOParserRuleCall_1_0; }
	}

	public class ArithBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ArithBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArithTerm1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArithTerm1ArithTermParserRuleCall_0_0 = (RuleCall)cArithTerm1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArithCOPAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArithCOPARITH_COMPARE_OPTerminalRuleCall_1_0_0 = (RuleCall)cArithCOPAssignment_1_0.eContents().get(0);
		private final Assignment cArithTerm2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArithTerm2ArithTermParserRuleCall_1_1_0 = (RuleCall)cArithTerm2Assignment_1_1.eContents().get(0);
		
		//ArithBool:
		//	arithTerm1=ArithTerm (arithCOP=ARITH_COMPARE_OP arithTerm2=ArithTerm)?;
		public ParserRule getRule() { return rule; }

		//arithTerm1=ArithTerm (arithCOP=ARITH_COMPARE_OP arithTerm2=ArithTerm)?
		public Group getGroup() { return cGroup; }

		//arithTerm1=ArithTerm
		public Assignment getArithTerm1Assignment_0() { return cArithTerm1Assignment_0; }

		//ArithTerm
		public RuleCall getArithTerm1ArithTermParserRuleCall_0_0() { return cArithTerm1ArithTermParserRuleCall_0_0; }

		//(arithCOP=ARITH_COMPARE_OP arithTerm2=ArithTerm)?
		public Group getGroup_1() { return cGroup_1; }

		//arithCOP=ARITH_COMPARE_OP
		public Assignment getArithCOPAssignment_1_0() { return cArithCOPAssignment_1_0; }

		//ARITH_COMPARE_OP
		public RuleCall getArithCOPARITH_COMPARE_OPTerminalRuleCall_1_0_0() { return cArithCOPARITH_COMPARE_OPTerminalRuleCall_1_0_0; }

		//arithTerm2=ArithTerm
		public Assignment getArithTerm2Assignment_1_1() { return cArithTerm2Assignment_1_1; }

		//ArithTerm
		public RuleCall getArithTerm2ArithTermParserRuleCall_1_1_0() { return cArithTerm2ArithTermParserRuleCall_1_1_0; }
	}

	public class ArithTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ArithTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArithTermLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArithTermLArithTermLParserRuleCall_0_0 = (RuleCall)cArithTermLAssignment_0.eContents().get(0);
		private final Assignment cArithTermRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArithTermRArithTermRParserRuleCall_1_0 = (RuleCall)cArithTermRAssignment_1.eContents().get(0);
		
		//ArithTerm:
		//	arithTermL=ArithTermL arithTermR=ArithTermR?;
		public ParserRule getRule() { return rule; }

		//arithTermL=ArithTermL arithTermR=ArithTermR?
		public Group getGroup() { return cGroup; }

		//arithTermL=ArithTermL
		public Assignment getArithTermLAssignment_0() { return cArithTermLAssignment_0; }

		//ArithTermL
		public RuleCall getArithTermLArithTermLParserRuleCall_0_0() { return cArithTermLArithTermLParserRuleCall_0_0; }

		//arithTermR=ArithTermR?
		public Assignment getArithTermRAssignment_1() { return cArithTermRAssignment_1; }

		//ArithTermR
		public RuleCall getArithTermRArithTermRParserRuleCall_1_0() { return cArithTermRArithTermRParserRuleCall_1_0; }
	}

	public class ArithTermLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ArithTermL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTrioAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTrioTRIOParserRuleCall_0_1_0 = (RuleCall)cTrioAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantDataTypeParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Assignment cArithVarAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cArithVarArithVarParserRuleCall_2_0 = (RuleCall)cArithVarAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFutrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArithTermFAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArithTermFArithTermParserRuleCall_3_1_0 = (RuleCall)cArithTermFAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cIntFAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cIntFINTTerminalRuleCall_3_3_0 = (RuleCall)cIntFAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cPastKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArithTermPAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArithTermPArithTermParserRuleCall_4_1_0 = (RuleCall)cArithTermPAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cIntPAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cIntPINTTerminalRuleCall_4_3_0 = (RuleCall)cIntPAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//ArithTermL:
		//	'(' trio=TRIO ')' | constant=DataType | arithVar=ArithVar |
		//	'Futr(' arithTermF=ArithTerm ',' intF=INT ')' |
		//	'Past(' arithTermP=ArithTerm ',' intP=INT ')';
		public ParserRule getRule() { return rule; }

		//'(' trio=TRIO ')' | constant=DataType | arithVar=ArithVar | 'Futr(' arithTermF=ArithTerm ',' intF=INT ')' | 'Past('
		//arithTermP=ArithTerm ',' intP=INT ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' trio=TRIO ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//trio=TRIO
		public Assignment getTrioAssignment_0_1() { return cTrioAssignment_0_1; }

		//TRIO
		public RuleCall getTrioTRIOParserRuleCall_0_1_0() { return cTrioTRIOParserRuleCall_0_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//constant=DataType
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//DataType
		public RuleCall getConstantDataTypeParserRuleCall_1_0() { return cConstantDataTypeParserRuleCall_1_0; }

		//arithVar=ArithVar
		public Assignment getArithVarAssignment_2() { return cArithVarAssignment_2; }

		//ArithVar
		public RuleCall getArithVarArithVarParserRuleCall_2_0() { return cArithVarArithVarParserRuleCall_2_0; }

		//'Futr(' arithTermF=ArithTerm ',' intF=INT ')'
		public Group getGroup_3() { return cGroup_3; }

		//'Futr('
		public Keyword getFutrKeyword_3_0() { return cFutrKeyword_3_0; }

		//arithTermF=ArithTerm
		public Assignment getArithTermFAssignment_3_1() { return cArithTermFAssignment_3_1; }

		//ArithTerm
		public RuleCall getArithTermFArithTermParserRuleCall_3_1_0() { return cArithTermFArithTermParserRuleCall_3_1_0; }

		//','
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//intF=INT
		public Assignment getIntFAssignment_3_3() { return cIntFAssignment_3_3; }

		//INT
		public RuleCall getIntFINTTerminalRuleCall_3_3_0() { return cIntFINTTerminalRuleCall_3_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//'Past(' arithTermP=ArithTerm ',' intP=INT ')'
		public Group getGroup_4() { return cGroup_4; }

		//'Past('
		public Keyword getPastKeyword_4_0() { return cPastKeyword_4_0; }

		//arithTermP=ArithTerm
		public Assignment getArithTermPAssignment_4_1() { return cArithTermPAssignment_4_1; }

		//ArithTerm
		public RuleCall getArithTermPArithTermParserRuleCall_4_1_0() { return cArithTermPArithTermParserRuleCall_4_1_0; }

		//','
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }

		//intP=INT
		public Assignment getIntPAssignment_4_3() { return cIntPAssignment_4_3; }

		//INT
		public RuleCall getIntPINTTerminalRuleCall_4_3_0() { return cIntPINTTerminalRuleCall_4_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}

	public class ArithTermRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ArithTermR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArithOPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArithOPARITH_OPTerminalRuleCall_0_0 = (RuleCall)cArithOPAssignment_0.eContents().get(0);
		private final Assignment cArithTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArithTermArithTermParserRuleCall_1_0 = (RuleCall)cArithTermAssignment_1.eContents().get(0);
		
		//ArithTermR:
		//	arithOP=ARITH_OP arithTerm=ArithTerm;
		public ParserRule getRule() { return rule; }

		//arithOP=ARITH_OP arithTerm=ArithTerm
		public Group getGroup() { return cGroup; }

		//arithOP=ARITH_OP
		public Assignment getArithOPAssignment_0() { return cArithOPAssignment_0; }

		//ARITH_OP
		public RuleCall getArithOPARITH_OPTerminalRuleCall_0_0() { return cArithOPARITH_OPTerminalRuleCall_0_0; }

		//arithTerm=ArithTerm
		public Assignment getArithTermAssignment_1() { return cArithTermAssignment_1; }

		//ArithTerm
		public RuleCall getArithTermArithTermParserRuleCall_1_0() { return cArithTermArithTermParserRuleCall_1_0; }
	}

	public class ArithVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ArithVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cObjAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cObjIDTerminalRuleCall_0_0_0 = (RuleCall)cObjAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAtrAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAtrIDTerminalRuleCall_0_2_0 = (RuleCall)cAtrAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cObjAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cObjIDTerminalRuleCall_1_0_0 = (RuleCall)cObjAssignment_1_0.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOpIDTerminalRuleCall_1_2_0 = (RuleCall)cOpAssignment_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cParamAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cParamIDTerminalRuleCall_1_4_0 = (RuleCall)cParamAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSdIDTerminalRuleCall_2_0_0 = (RuleCall)cSdAssignment_2_0.eContents().get(0);
		private final Keyword cGetParameterKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParamAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParamIDTerminalRuleCall_2_2_0 = (RuleCall)cParamAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ArithVar:
		//	obj=ID '.' atr=ID | obj=ID '::' op=ID '.' param=ID | sd=ID '.getParameter(' param=ID ')';
		public ParserRule getRule() { return rule; }

		//obj=ID '.' atr=ID | obj=ID '::' op=ID '.' param=ID | sd=ID '.getParameter(' param=ID ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//obj=ID '.' atr=ID
		public Group getGroup_0() { return cGroup_0; }

		//obj=ID
		public Assignment getObjAssignment_0_0() { return cObjAssignment_0_0; }

		//ID
		public RuleCall getObjIDTerminalRuleCall_0_0_0() { return cObjIDTerminalRuleCall_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//atr=ID
		public Assignment getAtrAssignment_0_2() { return cAtrAssignment_0_2; }

		//ID
		public RuleCall getAtrIDTerminalRuleCall_0_2_0() { return cAtrIDTerminalRuleCall_0_2_0; }

		//obj=ID '::' op=ID '.' param=ID
		public Group getGroup_1() { return cGroup_1; }

		//obj=ID
		public Assignment getObjAssignment_1_0() { return cObjAssignment_1_0; }

		//ID
		public RuleCall getObjIDTerminalRuleCall_1_0_0() { return cObjIDTerminalRuleCall_1_0_0; }

		//'::'
		public Keyword getColonColonKeyword_1_1() { return cColonColonKeyword_1_1; }

		//op=ID
		public Assignment getOpAssignment_1_2() { return cOpAssignment_1_2; }

		//ID
		public RuleCall getOpIDTerminalRuleCall_1_2_0() { return cOpIDTerminalRuleCall_1_2_0; }

		//'.'
		public Keyword getFullStopKeyword_1_3() { return cFullStopKeyword_1_3; }

		//param=ID
		public Assignment getParamAssignment_1_4() { return cParamAssignment_1_4; }

		//ID
		public RuleCall getParamIDTerminalRuleCall_1_4_0() { return cParamIDTerminalRuleCall_1_4_0; }

		//sd=ID '.getParameter(' param=ID ')'
		public Group getGroup_2() { return cGroup_2; }

		//sd=ID
		public Assignment getSdAssignment_2_0() { return cSdAssignment_2_0; }

		//ID
		public RuleCall getSdIDTerminalRuleCall_2_0_0() { return cSdIDTerminalRuleCall_2_0_0; }

		//'.getParameter('
		public Keyword getGetParameterKeyword_2_1() { return cGetParameterKeyword_2_1; }

		//param=ID
		public Assignment getParamAssignment_2_2() { return cParamAssignment_2_2; }

		//ID
		public RuleCall getParamIDTerminalRuleCall_2_2_0() { return cParamIDTerminalRuleCall_2_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIINTTerminalRuleCall_0_0 = (RuleCall)cIAssignment_0.eContents().get(0);
		private final Assignment cFloatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFloatFLOATTerminalRuleCall_1_0 = (RuleCall)cFloatAssignment_1.eContents().get(0);
		
		//DataType:
		//	i=INT float=FLOAT?;
		public ParserRule getRule() { return rule; }

		//i=INT float=FLOAT?
		public Group getGroup() { return cGroup; }

		//i=INT
		public Assignment getIAssignment_0() { return cIAssignment_0; }

		//INT
		public RuleCall getIINTTerminalRuleCall_0_0() { return cIINTTerminalRuleCall_0_0; }

		//float=FLOAT?
		public Assignment getFloatAssignment_1() { return cFloatAssignment_1; }

		//FLOAT
		public RuleCall getFloatFLOATTerminalRuleCall_1_0() { return cFloatFLOATTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final CorrettoElements pCorretto;
	private final TerminalRule tEXECUTE;
	private final VerifyElements pVerify;
	private final DeclarationElements pDeclaration;
	private final TRIOElements pTRIO;
	private final TRIOLElements pTRIOL;
	private final TRIORElements pTRIOR;
	private final TerminalRule tTRIOOP2;
	private final TerminalRule tTRIOOPF;
	private final TerminalRule tTRIOOPFF;
	private final TerminalRule tTRIOOPFN;
	private final ArithBoolElements pArithBool;
	private final ArithTermElements pArithTerm;
	private final ArithTermLElements pArithTermL;
	private final ArithTermRElements pArithTermR;
	private final ArithVarElements pArithVar;
	private final DataTypeElements pDataType;
	private final TerminalRule tFLOAT;
	private final TerminalRule tARITH_OP;
	private final TerminalRule tARITH_COMPARE_OP;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PropertyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCorretto = new CorrettoElements();
		this.tEXECUTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.EXECUTE");
		this.pVerify = new VerifyElements();
		this.pDeclaration = new DeclarationElements();
		this.pTRIO = new TRIOElements();
		this.pTRIOL = new TRIOLElements();
		this.pTRIOR = new TRIORElements();
		this.tTRIOOP2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIOOP2");
		this.tTRIOOPF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIOOPF");
		this.tTRIOOPFF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIOOPFF");
		this.tTRIOOPFN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.TRIOOPFN");
		this.pArithBool = new ArithBoolElements();
		this.pArithTerm = new ArithTermElements();
		this.pArithTermL = new ArithTermLElements();
		this.pArithTermR = new ArithTermRElements();
		this.pArithVar = new ArithVarElements();
		this.pDataType = new DataTypeElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.FLOAT");
		this.tARITH_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ARITH_OP");
		this.tARITH_COMPARE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.correttouml.grammars.Property.ARITH_COMPARE_OP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.correttouml.grammars.Property".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	declarations+=Declaration* correttoCommand=Corretto;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Corretto:
	//	'Corretto.' (verify=Verify | execute=EXECUTE);
	public CorrettoElements getCorrettoAccess() {
		return pCorretto;
	}
	
	public ParserRule getCorrettoRule() {
		return getCorrettoAccess().getRule();
	}

	//terminal EXECUTE:
	//	'execute()';
	public TerminalRule getEXECUTERule() {
		return tEXECUTE;
	} 

	//Verify:
	//	'verify(' trio=TRIO ')';
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}

	//Declaration:
	//	stateName=ID '=' obj=ID '.getState(' std=ID ',' uMLStateName=ID ')' | trioVar=ID '=' (trio=TRIO | obj=ID '.in('
	//	stateName=ID ')');
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//TRIO:
	//	trioL=TRIOL trioR=TRIOR?;
	public TRIOElements getTRIOAccess() {
		return pTRIO;
	}
	
	public ParserRule getTRIORule() {
		return getTRIOAccess().getRule();
	}

	//TRIOL:
	//	trioVar=ID (opName=ID '()')? | arithBool=ArithBool |
	//	'!(' trioNot=TRIO ')' |
	//	'Time.' trioOpF=TRIOOPF '(' trioOpF1=TRIO ')' |
	//	'Time.' trioOpFF=TRIOOPFF '(' trioOpFF1=TRIO ',' trioOpFF2=TRIO ')' |
	//	'Time.' trioOpFN=TRIOOPFN '(' trioOpFN1=TRIO ',' int=INT ')';
	public TRIOLElements getTRIOLAccess() {
		return pTRIOL;
	}
	
	public ParserRule getTRIOLRule() {
		return getTRIOLAccess().getRule();
	}

	//TRIOR:
	//	trioOP2=TRIOOP2 trio=TRIO;
	public TRIORElements getTRIORAccess() {
		return pTRIOR;
	}
	
	public ParserRule getTRIORRule() {
		return getTRIORAccess().getRule();
	}

	//terminal TRIOOP2: //TRIO propositional operators with 2 operands
	//	'&&' | '||' | '=>' | '<=>' | '->' | '<->';
	public TerminalRule getTRIOOP2Rule() {
		return tTRIOOP2;
	} 

	//terminal TRIOOPF: //TRIO temporal operators with 1 operands
	//	'alw' | 'always' | 'alwaysTrue' | 'neverFalse' | 'som' | 'atLeastOnce' | 'alwF' | 'alwaysWillBe' | 'somF' |
	//	'eventually' | 'eventuallyWillBe' | 'alwP' | 'historically' | 'alwaysHasBeen' | 'somP' | 'alwaysFalse' | 'neverTrue';
	public TerminalRule getTRIOOPFRule() {
		return tTRIOOPF;
	} 

	//terminal TRIOOPFF: //TRIO temporal operators with 2 formula operands
	//	'until' | 'since' | 'release' | 'trigger';
	public TerminalRule getTRIOOPFFRule() {
		return tTRIOOPFF;
	} 

	//terminal TRIOOPFN: //TRIO temporal operators with 1 formula operand and a number
	//	'futr' | 'past' | 'withinF' | 'withinP' | 'lasts' | 'lasted';
	public TerminalRule getTRIOOPFNRule() {
		return tTRIOOPFN;
	} 

	//ArithBool:
	//	arithTerm1=ArithTerm (arithCOP=ARITH_COMPARE_OP arithTerm2=ArithTerm)?;
	public ArithBoolElements getArithBoolAccess() {
		return pArithBool;
	}
	
	public ParserRule getArithBoolRule() {
		return getArithBoolAccess().getRule();
	}

	//ArithTerm:
	//	arithTermL=ArithTermL arithTermR=ArithTermR?;
	public ArithTermElements getArithTermAccess() {
		return pArithTerm;
	}
	
	public ParserRule getArithTermRule() {
		return getArithTermAccess().getRule();
	}

	//ArithTermL:
	//	'(' trio=TRIO ')' | constant=DataType | arithVar=ArithVar |
	//	'Futr(' arithTermF=ArithTerm ',' intF=INT ')' |
	//	'Past(' arithTermP=ArithTerm ',' intP=INT ')';
	public ArithTermLElements getArithTermLAccess() {
		return pArithTermL;
	}
	
	public ParserRule getArithTermLRule() {
		return getArithTermLAccess().getRule();
	}

	//ArithTermR:
	//	arithOP=ARITH_OP arithTerm=ArithTerm;
	public ArithTermRElements getArithTermRAccess() {
		return pArithTermR;
	}
	
	public ParserRule getArithTermRRule() {
		return getArithTermRAccess().getRule();
	}

	//ArithVar:
	//	obj=ID '.' atr=ID | obj=ID '::' op=ID '.' param=ID | sd=ID '.getParameter(' param=ID ')';
	public ArithVarElements getArithVarAccess() {
		return pArithVar;
	}
	
	public ParserRule getArithVarRule() {
		return getArithVarAccess().getRule();
	}

	//DataType:
	//	i=INT float=FLOAT?;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//terminal FLOAT:
	//	'.' '0'..'9'+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal ARITH_OP:
	//	'+' | '-' | '*' | '/';
	public TerminalRule getARITH_OPRule() {
		return tARITH_OP;
	} 

	//terminal ARITH_COMPARE_OP:
	//	'>' | '>=' | '<' | '<=' | '==' | '!=';
	public TerminalRule getARITH_COMPARE_OPRule() {
		return tARITH_COMPARE_OP;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
