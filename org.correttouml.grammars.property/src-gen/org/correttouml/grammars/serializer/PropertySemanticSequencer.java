/*
 * generated by Xtext
 */
package org.correttouml.grammars.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.correttouml.grammars.property.ArithBool;
import org.correttouml.grammars.property.ArithTerm;
import org.correttouml.grammars.property.ArithTermL;
import org.correttouml.grammars.property.ArithTermR;
import org.correttouml.grammars.property.ArithVar;
import org.correttouml.grammars.property.Corretto;
import org.correttouml.grammars.property.DataType;
import org.correttouml.grammars.property.Declaration;
import org.correttouml.grammars.property.Model;
import org.correttouml.grammars.property.PropertyPackage;
import org.correttouml.grammars.property.TRIO;
import org.correttouml.grammars.property.TRIOL;
import org.correttouml.grammars.property.TRIOR;
import org.correttouml.grammars.property.Verify;
import org.correttouml.grammars.services.PropertyGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PropertySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PropertyGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PropertyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PropertyPackage.ARITH_BOOL:
				sequence_ArithBool(context, (ArithBool) semanticObject); 
				return; 
			case PropertyPackage.ARITH_TERM:
				sequence_ArithTerm(context, (ArithTerm) semanticObject); 
				return; 
			case PropertyPackage.ARITH_TERM_L:
				sequence_ArithTermL(context, (ArithTermL) semanticObject); 
				return; 
			case PropertyPackage.ARITH_TERM_R:
				sequence_ArithTermR(context, (ArithTermR) semanticObject); 
				return; 
			case PropertyPackage.ARITH_VAR:
				sequence_ArithVar(context, (ArithVar) semanticObject); 
				return; 
			case PropertyPackage.CORRETTO:
				sequence_Corretto(context, (Corretto) semanticObject); 
				return; 
			case PropertyPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case PropertyPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case PropertyPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PropertyPackage.TRIO:
				sequence_TRIO(context, (TRIO) semanticObject); 
				return; 
			case PropertyPackage.TRIOL:
				sequence_TRIOL(context, (TRIOL) semanticObject); 
				return; 
			case PropertyPackage.TRIOR:
				sequence_TRIOR(context, (TRIOR) semanticObject); 
				return; 
			case PropertyPackage.VERIFY:
				sequence_Verify(context, (Verify) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ArithBool returns ArithBool
	 *
	 * Constraint:
	 *     (arithTerm1=ArithTerm (arithCOP=ARITH_COMPARE_OP arithTerm2=ArithTerm)?)
	 */
	protected void sequence_ArithBool(ISerializationContext context, ArithBool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArithTermL returns ArithTermL
	 *
	 * Constraint:
	 *     (trio=TRIO | constant=DataType | arithVar=ArithVar | (arithTermF=ArithTerm intF=INT) | (arithTermP=ArithTerm intP=INT))
	 */
	protected void sequence_ArithTermL(ISerializationContext context, ArithTermL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArithTermR returns ArithTermR
	 *
	 * Constraint:
	 *     (arithOP=ARITH_OP arithTerm=ArithTerm)
	 */
	protected void sequence_ArithTermR(ISerializationContext context, ArithTermR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PropertyPackage.Literals.ARITH_TERM_R__ARITH_OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PropertyPackage.Literals.ARITH_TERM_R__ARITH_OP));
			if (transientValues.isValueTransient(semanticObject, PropertyPackage.Literals.ARITH_TERM_R__ARITH_TERM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PropertyPackage.Literals.ARITH_TERM_R__ARITH_TERM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArithTermRAccess().getArithOPARITH_OPTerminalRuleCall_0_0(), semanticObject.getArithOP());
		feeder.accept(grammarAccess.getArithTermRAccess().getArithTermArithTermParserRuleCall_1_0(), semanticObject.getArithTerm());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ArithTerm returns ArithTerm
	 *
	 * Constraint:
	 *     (arithTermL=ArithTermL arithTermR=ArithTermR?)
	 */
	protected void sequence_ArithTerm(ISerializationContext context, ArithTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArithVar returns ArithVar
	 *
	 * Constraint:
	 *     ((obj=ID atr=ID) | (obj=ID op=ID param=ID) | (sd=ID param=ID))
	 */
	protected void sequence_ArithVar(ISerializationContext context, ArithVar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Corretto returns Corretto
	 *
	 * Constraint:
	 *     (verify=Verify | execute=EXECUTE)
	 */
	protected void sequence_Corretto(ISerializationContext context, Corretto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (i=INT float=FLOAT?)
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     ((stateName=ID obj=ID std=ID uMLStateName=ID) | (trioVar=ID (trio=TRIO | (obj=ID stateName=ID))))
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (declarations+=Declaration* correttoCommand=Corretto)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TRIOL returns TRIOL
	 *
	 * Constraint:
	 *     (
	 *         (trioVar=ID opName=ID?) | 
	 *         arithBool=ArithBool | 
	 *         trioNot=TRIO | 
	 *         (trioOpF=TRIOOPF trioOpF1=TRIO) | 
	 *         (trioOpFF=TRIOOPFF trioOpFF1=TRIO trioOpFF2=TRIO) | 
	 *         (trioOpFN=TRIOOPFN trioOpFN1=TRIO int=INT)
	 *     )
	 */
	protected void sequence_TRIOL(ISerializationContext context, TRIOL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TRIOR returns TRIOR
	 *
	 * Constraint:
	 *     (trioOP2=TRIOOP2 trio=TRIO)
	 */
	protected void sequence_TRIOR(ISerializationContext context, TRIOR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PropertyPackage.Literals.TRIOR__TRIO_OP2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PropertyPackage.Literals.TRIOR__TRIO_OP2));
			if (transientValues.isValueTransient(semanticObject, PropertyPackage.Literals.TRIOR__TRIO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PropertyPackage.Literals.TRIOR__TRIO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTRIORAccess().getTrioOP2TRIOOP2TerminalRuleCall_0_0(), semanticObject.getTrioOP2());
		feeder.accept(grammarAccess.getTRIORAccess().getTrioTRIOParserRuleCall_1_0(), semanticObject.getTrio());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TRIO returns TRIO
	 *
	 * Constraint:
	 *     (trioL=TRIOL trioR=TRIOR?)
	 */
	protected void sequence_TRIO(ISerializationContext context, TRIO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Verify returns Verify
	 *
	 * Constraint:
	 *     trio=TRIO
	 */
	protected void sequence_Verify(ISerializationContext context, Verify semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PropertyPackage.Literals.VERIFY__TRIO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PropertyPackage.Literals.VERIFY__TRIO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVerifyAccess().getTrioTRIOParserRuleCall_1_0(), semanticObject.getTrio());
		feeder.finish();
	}
	
	
}
