/*
 * generated by Xtext
 */
grammar InternalStateMachineTriggers;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.correttouml.grammars.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.correttouml.grammars.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.correttouml.grammars.services.StateMachineTriggersGrammarAccess;

}

@parser::members {

 	private StateMachineTriggersGrammarAccess grammarAccess;
 	
    public InternalStateMachineTriggersParser(TokenStream input, StateMachineTriggersGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected StateMachineTriggersGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTriggerTriggerParserRuleCall_0()); 
	    }
		lv_trigger_0_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_0_0, 
        		"org.correttouml.grammars.StateMachineTriggers.Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getLeftLeftParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleLeft		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"org.correttouml.grammars.StateMachineTriggers.Left");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getRightRightParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleRight		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"org.correttouml.grammars.StateMachineTriggers.Right");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	 iv_ruleLeft=ruleLeft 
	 { $current=$iv_ruleLeft.current; } 
	 EOF 
;

// Rule Left
ruleLeft returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLeftAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLeftAccess().getEventEventParserRuleCall_1_0()); 
	    }
		lv_event_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeftRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"org.correttouml.grammars.StateMachineTriggers.Event");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	 iv_ruleRight=ruleRight 
	 { $current=$iv_ruleRight.current; } 
	 EOF 
;

// Rule Right
ruleRight returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRightAccess().getHyphenMinusKeyword_0());
    }
	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRightAccess().getCommercialAtKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRightAccess().getEventEventParserRuleCall_2_0()); 
	    }
		lv_event_2_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRightRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_2_0, 
        		"org.correttouml.grammars.StateMachineTriggers.Event");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_op_3_0=RULE_RELATIONS
		{
			newLeafNode(lv_op_3_0, grammarAccess.getRightAccess().getOpRELATIONSTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"org.correttouml.grammars.StateMachineTriggers.RELATIONS");
	    }

)
)(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getRightAccess().getValueINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRightRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
))
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		lv_objName_0_0=RULE_ID
		{
			newLeafNode(lv_objName_0_0, grammarAccess.getEventAccess().getObjNameIDTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"objName",
        		lv_objName_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventAccess().getFullStopKeyword_0_0_1());
    }
)?((
(
		lv_eventName_2_0=RULE_ID
		{
			newLeafNode(lv_eventName_2_0, grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"eventName",
        		lv_eventName_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEventAccess().getFullStopKeyword_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getEventExtensionEventExtensionsParserRuleCall_0_1_2_0()); 
	    }
		lv_eventExtension_4_0=ruleEventExtensions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"eventExtension",
        		lv_eventExtension_4_0, 
        		"org.correttouml.grammars.StateMachineTriggers.EventExtensions");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		lv_nowEvent_5_0=	'now' 
    {
        newLeafNode(lv_nowEvent_5_0, grammarAccess.getEventAccess().getNowEventNowKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed($current, "nowEvent", true, "now");
	    }

)
))
;





// Entry rule entryRuleEventExtensions
entryRuleEventExtensions returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventExtensionsRule()); } 
	 iv_ruleEventExtensions=ruleEventExtensions 
	 { $current=$iv_ruleEventExtensions.current.getText(); }  
	 EOF 
;

// Rule EventExtensions
ruleEventExtensions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='exit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getExitKeyword_0()); 
    }

    |
	kw='enter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getEnterKeyword_1()); 
    }

    |
	kw='start' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getStartKeyword_2()); 
    }

    |
	kw='end' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getEndKeyword_3()); 
    }

    |
	kw='tick' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getTickKeyword_4()); 
    }

    |
	kw='sig' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getSigKeyword_5()); 
    }

    |
	kw='call' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getCallKeyword_6()); 
    }

    |
	kw='reply' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getReplyKeyword_7()); 
    }

    |
	kw='adstart' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getAdstartKeyword_8()); 
    }

    |
	kw='adend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getAdendKeyword_9()); 
    }

    |
	kw='iodstart' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getIodstartKeyword_10()); 
    }

    |
	kw='iodend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEventExtensionsAccess().getIodendKeyword_11()); 
    }
)
    ;





RULE_RELATIONS : ('<'|'>'|'=='|'<='|'>='|'!=');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


