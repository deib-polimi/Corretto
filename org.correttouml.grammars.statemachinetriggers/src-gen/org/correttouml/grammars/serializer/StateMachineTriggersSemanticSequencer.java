/*
 * generated by Xtext
 */
package org.correttouml.grammars.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.correttouml.grammars.services.StateMachineTriggersGrammarAccess;
import org.correttouml.grammars.stateMachineTriggers.Event;
import org.correttouml.grammars.stateMachineTriggers.Left;
import org.correttouml.grammars.stateMachineTriggers.Model;
import org.correttouml.grammars.stateMachineTriggers.Right;
import org.correttouml.grammars.stateMachineTriggers.StateMachineTriggersPackage;
import org.correttouml.grammars.stateMachineTriggers.Trigger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class StateMachineTriggersSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StateMachineTriggersGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StateMachineTriggersPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StateMachineTriggersPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StateMachineTriggersPackage.LEFT:
				sequence_Left(context, (Left) semanticObject); 
				return; 
			case StateMachineTriggersPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case StateMachineTriggersPackage.RIGHT:
				sequence_Right(context, (Right) semanticObject); 
				return; 
			case StateMachineTriggersPackage.TRIGGER:
				sequence_Trigger(context, (Trigger) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     ((objName=ID? eventName=ID eventExtension=EventExtensions) | nowEvent?='now')
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Left returns Left
	 *
	 * Constraint:
	 *     event=Event
	 */
	protected void sequence_Left(ISerializationContext context, Left semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineTriggersPackage.Literals.LEFT__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineTriggersPackage.Literals.LEFT__EVENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeftAccess().getEventEventParserRuleCall_1_0(), semanticObject.getEvent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     trigger=Trigger
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineTriggersPackage.Literals.MODEL__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineTriggersPackage.Literals.MODEL__TRIGGER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getTriggerTriggerParserRuleCall_0(), semanticObject.getTrigger());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Right returns Right
	 *
	 * Constraint:
	 *     (event=Event op=RELATIONS value=INT)
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StateMachineTriggersPackage.Literals.RIGHT__EVENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineTriggersPackage.Literals.RIGHT__EVENT));
			if (transientValues.isValueTransient(semanticObject, StateMachineTriggersPackage.Literals.RIGHT__OP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineTriggersPackage.Literals.RIGHT__OP));
			if (transientValues.isValueTransient(semanticObject, StateMachineTriggersPackage.Literals.RIGHT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StateMachineTriggersPackage.Literals.RIGHT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRightAccess().getEventEventParserRuleCall_2_0(), semanticObject.getEvent());
		feeder.accept(grammarAccess.getRightAccess().getOpRELATIONSTerminalRuleCall_3_0(), semanticObject.getOp());
		feeder.accept(grammarAccess.getRightAccess().getValueINTTerminalRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Trigger returns Trigger
	 *
	 * Constraint:
	 *     (left=Left right=Right?)
	 */
	protected void sequence_Trigger(ISerializationContext context, Trigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
