/*
* generated by Xtext
*/
package org.correttouml.grammars.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.correttouml.grammars.services.StateMachineTriggersGrammarAccess;

public class StateMachineTriggersParser extends AbstractContentAssistParser {
	
	@Inject
	private StateMachineTriggersGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineTriggersParser createParser() {
		org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineTriggersParser result = new org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineTriggersParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getEventExtensionsAccess().getAlternatives(), "rule__EventExtensions__Alternatives");
					put(grammarAccess.getTriggerAccess().getGroup(), "rule__Trigger__Group__0");
					put(grammarAccess.getLeftAccess().getGroup(), "rule__Left__Group__0");
					put(grammarAccess.getRightAccess().getGroup(), "rule__Right__Group__0");
					put(grammarAccess.getEventAccess().getGroup_0(), "rule__Event__Group_0__0");
					put(grammarAccess.getModelAccess().getTriggerAssignment(), "rule__Model__TriggerAssignment");
					put(grammarAccess.getTriggerAccess().getLeftAssignment_0(), "rule__Trigger__LeftAssignment_0");
					put(grammarAccess.getTriggerAccess().getRightAssignment_1(), "rule__Trigger__RightAssignment_1");
					put(grammarAccess.getLeftAccess().getEventAssignment_1(), "rule__Left__EventAssignment_1");
					put(grammarAccess.getRightAccess().getEventAssignment_2(), "rule__Right__EventAssignment_2");
					put(grammarAccess.getRightAccess().getOpAssignment_3(), "rule__Right__OpAssignment_3");
					put(grammarAccess.getRightAccess().getValueAssignment_4(), "rule__Right__ValueAssignment_4");
					put(grammarAccess.getEventAccess().getEventNameAssignment_0_0(), "rule__Event__EventNameAssignment_0_0");
					put(grammarAccess.getEventAccess().getEventExtensionAssignment_0_2(), "rule__Event__EventExtensionAssignment_0_2");
					put(grammarAccess.getEventAccess().getNowEventAssignment_1(), "rule__Event__NowEventAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineTriggersParser typedParser = (org.correttouml.grammars.ui.contentassist.antlr.internal.InternalStateMachineTriggersParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StateMachineTriggersGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StateMachineTriggersGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
